{"version":3,"sources":["../src/ciscospark.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,IAAM,eAAe,EAArB,CAvBA;;;;;;AAMA;;AAkBA,IAAI,CAAC,oBAAS,MAAd,EAAsB;AACpB,oCAAkC,eAAgB,MAAlD;AACD;;AAED,qEAA2C;AACzC;AADyC,CAA3C;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiEA,IAAM,aAAa,wBAAe;AAChC,eAAa;AACX,mBAAe;AACb,oBAAc,QAAQ,GAAR,CAAY,uBADb;AAEb,qBAAe,QAAQ,GAAR,CAAY;AAFd;AADJ,GADmB;AAOhC;AAPgC,CAAf,CAAnB;;AAUA;;;;;;;;;AASA,WAAW,IAAX,GAAkB,SAAS,IAAT,CAAc,KAAd,EAAqB;AACrC,MAAI,mBAAI,KAAJ,iCAA0C,+CAA9C,EAAgF;AAC9E,UAAM,WAAN,CAAkB,aAAlB,GAAkC,EAAlC;AACA,kIAQE,OARF,CAQU,UAAC,GAAD,EAAS;AACjB,yBAAI,KAAJ,iCAAwC,GAAxC,EAA+C,mBAAI,KAAJ,mBAA0B,GAA1B,CAA/C;AACA,oCAAuB,MAAM,WAA7B,EAA0C,GAA1C;AACD,KAXD;AAYD;;AAED,QAAM,MAAN,GAAe,wBAAS,MAAM,MAAf,mBAAf;;AAEA,SAAO,wBAAe,KAAf,CAAP;AACD,CApBD;;kBAsBe,U","file":"ciscospark.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\n/* eslint camelcase: [0] */\n\nimport '@ciscospark/plugin-phone';\n\nimport {defaults, get, has, set} from 'lodash';\nimport CiscoSpark, {children, registerPlugin} from '@ciscospark/spark-core';\nimport AuthInterceptor from './interceptors/auth';\nimport Memberships from './plugins/memberships';\nimport Messages from './plugins/messages';\nimport People from './plugins/people';\nimport Rooms from './plugins/rooms';\nimport Teams from './plugins/teams';\nimport TeamMemberships from './plugins/team-memberships';\nimport Webhooks from './plugins/webhooks';\nimport config from './config';\n\n// This shouldn't be necessary once the plugins are moved to their own packages\nconst interceptors = {};\nif (!children.device) {\n  interceptors[`AuthInterceptor`] = AuthInterceptor.create;\n}\n\nregisterPlugin(`memberships`, Memberships, {\n  interceptors\n});\nregisterPlugin(`messages`, Messages);\nregisterPlugin(`people`, People);\nregisterPlugin(`rooms`, Rooms);\nregisterPlugin(`teams`, Teams);\nregisterPlugin(`teamMemberships`, TeamMemberships);\nregisterPlugin(`webhooks`, Webhooks);\n\n/**\n * SDK for Cisco Spark\n *\n * ## Installation\n *\n * ```javascript\n * npm install --save ciscospark\n * ```\n *\n * ## A Note on Browsers\n * Ciscospark is fully browser compatible but we don't distribute a browserified\n * bundle at this time; you'll need to build the bundle yourself. We use\n * [browserify](http://browserify.org/) internally and\n * [webpack](https://webpack.github.io/) should work as well.\n *\n * ## Getting Started\n *\n *\n * The quickest way to get started is to set your access token as an environment\n * variable:\n *\n * ```javascript\n * <%= gettingstarted__accesstoken %>\n * ```\n\n * ### Refresh Tokens\n *\n * For long-running use cases, you'll need to provide a refresh token, client\n * id, and client secret:\n *\n * ```javascript\n * TODO\n * ```\n *\n * ## Runtime Configuration\n *\n * While environment variables are handy for development, they don't really help\n * you write an app for lots of users. You can pass credentials to the spark\n * using init.\n *\n * ```javascript\n * TODO\n * ```\n *\n * ## OAuth\n *\n * OAuth is baked right into spark so you don't need to figure it out.\n *\n * To kick off an OAuth login, simply call `spark.authenticate()` which will\n * direct the current app to our login page.\n *\n * ```javascript\n * TODO\n * ```\n *\n * To refresh an access token, call `spark.authorize()`. (Note: this should\n * generally happen for you automatically).\n *\n * ```javascript\n * TODO\n * ```\n *\n * @class CiscoSpark\n * @extends SparkCore\n */\nconst ciscospark = new CiscoSpark({\n  credentials: {\n    authorization: {\n      access_token: process.env.CISCOSPARK_ACCESS_TOKEN,\n      refresh_token: process.env.CISCOSPARK_REFRESH_TOKEN\n    }\n  },\n  config\n});\n\n/**\n * While environment variables are handy for development, they don't really help\n * you write an app for lots of users. You can pass credentials to the spark\n * using init.\n * @param {Object} attrs\n * @param {Object} attrs.credentials\n * @memberof CiscoSpark\n * @returns {CiscoSpark}\n */\nciscospark.init = function init(attrs) {\n  if (has(attrs, `credentials.access_token`) || has(`credentials.refresh_token`)) {\n    attrs.credentials.authorization = {};\n    [\n      `access_token`,\n      `token_type`,\n      `expires`,\n      `expires_in`,\n      `refresh_token`,\n      `refresh_token_expires`,\n      `refresh_token_expires_in`\n    ].forEach((key) => {\n      set(attrs, `credentials.authorization.${key}`, get(attrs, `credentials.${key}`));\n      Reflect.deleteProperty(attrs.credentials, key);\n    });\n  }\n\n  attrs.config = defaults(attrs.config, config);\n\n  return new CiscoSpark(attrs);\n};\n\nexport default ciscospark;\n"]}