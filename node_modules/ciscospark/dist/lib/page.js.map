{"version":3,"sources":["../../src/lib/page.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAMA,IAAM,WAAW,uBAAjB;AACA,IAAM,WAAW,uBAAjB;AACA,IAAM,YAAY,uBAAlB;;AAEA;;;;IAGqB,I;;;;AACnB;;;wBAGY;AACV,aAAO,SAAS,GAAT,CAAa,IAAb,CAAP;AACD;;AAED;;;;;;wBAGa;AACX,aAAO,KAAK,KAAL,CAAW,MAAlB;AACD;;AAED;;;;;;;wBAIY;AACV,aAAO,SAAS,GAAT,CAAa,IAAb,CAAP;AACD;;AAED;;;;;;;wBAIY;AACV,aAAO,UAAU,GAAV,CAAc,IAAd,CAAP;AACD;;AAED;;;;;;;;;AAMA,gBAAY,GAAZ,EAAiB,KAAjB,EAAwB;AAAA;;AACtB,aAAS,GAAT,CAAa,IAAb,EAAmB,IAAI,IAAJ,CAAS,KAA5B;AACA,aAAS,GAAT,CAAa,IAAb,EAAmB,KAAK,gBAAL,CAAsB,IAAI,OAAJ,CAAY,IAAlC,CAAnB;AACA,cAAU,GAAV,CAAc,IAAd,EAAoB,KAApB;;AAEA,WAAO,IAAP;AACD;;AAED;;;;;;;;;;;;AAyBA;;;;2BAIO;AACL,aAAO,KAAK,OAAL,QAAP;AACD;;AAED;;;;;;;8BAIU;AACR,aAAO,KAAK,OAAL,QAAP;AACD;;AAED;;;;;;;+BAIW;AACT,aAAO,KAAK,OAAL,YAAP;AACD;;AAED;;;;;;;kCAIc;AACZ,aAAO,KAAK,OAAL,YAAP;AACD;;AAED;;;;;;;;;4BAMQ,I,EAAM;AAAA;;AACZ,aAAO,KAAK,KAAL,CAAW,OAAX,CAAmB;AACxB,aAAK,KAAK,KAAL,CAAW,IAAX;AADmB,OAAnB,EAGJ,IAHI,CAGC,UAAC,GAAD;AAAA,eAAS,IAAI,IAAJ,CAAS,GAAT,EAAc,MAAK,KAAnB,CAAT;AAAA,OAHD,CAAP;AAID;;AAED;;;;;;;;;4BAMQ,I,EAAM;AACZ,aAAO,QAAQ,KAAK,KAAL,CAAW,IAAX,CAAR,CAAP;AACD;;AAED;;;;;;;4BAIoB;AAAA;;AAClB,UAAI,IAAI,CAAC,CAAT;AACA,aAAO;AACL,cAAM,gBAAM;AACV,eAAK,CAAL;AACA,cAAI,IAAI,OAAK,MAAb,EAAqB;AACnB,mBAAO;AACL,qBAAO,OAAK,KAAL,CAAW,CAAX;AADF,aAAP;AAGD;;AAED,iBAAO,EAAC,MAAM,IAAP,EAAP;AACD;AAVI,OAAP;AAYD;;;qCA5FuB,W,EAAa;AACnC,UAAI,CAAC,WAAL,EAAkB;AAChB,eAAO,EAAP;AACD;;AAED,oBAAc,MAAM,OAAN,CAAc,WAAd,KAA8B,CAAC,WAAD,CAA5C;AACA,aAAO,YAAY,MAAZ,CAAmB,UAAC,KAAD,EAAQ,UAAR,EAAuB;AAC/C,qBAAa,WAAW,KAAX,KAAb;AACA,YAAM,OAAO,WAAW,CAAX,EACV,OADU,UAEV,OAFU,SAAb;AAGA,YAAM,MAAM,WAAW,CAAX,EACT,KADS,MACE,CADF,EAET,OAFS,CAED,IAFC,KAAZ;AAGA,cAAM,GAAN,IAAa,IAAb;AACA,eAAO,KAAP;AACD,OAVM,EAUJ,EAVI,CAAP;AAWD;;;;;kBApEkB,I","file":"page.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nconst itemsMap = new WeakMap();\nconst linksMap = new WeakMap();\nconst sparksMap = new WeakMap();\n\n/**\n * @class Page\n */\nexport default class Page {\n  /**\n   * @type {Array}\n   */\n  get items() {\n    return itemsMap.get(this);\n  }\n\n  /**\n   * @type {number}\n   */\n  get length() {\n    return this.items.length;\n  }\n\n  /**\n   * @private\n   * @type {Object}\n   */\n  get links() {\n    return linksMap.get(this);\n  }\n\n  /**\n   * @private\n   * @type {ProxySpark}\n   */\n  get spark() {\n    return sparksMap.get(this);\n  }\n\n  /**\n   * @constructs {Page}\n   * @param {HttpResponse} res\n   * @param {ProxySpark} spark\n   * @returns {Page}\n   */\n  constructor(res, spark) {\n    itemsMap.set(this, res.body.items);\n    linksMap.set(this, Page.parseLinkHeaders(res.headers.link));\n    sparksMap.set(this, spark);\n\n    return this;\n  }\n\n  /**\n   * Separate a single link header string into an actionable object\n   * @param {string} linkHeaders\n   * @private\n   * @returns {Object}\n   */\n  static parseLinkHeaders(linkHeaders) {\n    if (!linkHeaders) {\n      return {};\n    }\n\n    linkHeaders = Array.isArray(linkHeaders) || [linkHeaders];\n    return linkHeaders.reduce((links, linkHeader) => {\n      linkHeader = linkHeader.split(`;`);\n      const link = linkHeader[0]\n        .replace(`<`, ``)\n        .replace(`>`, ``);\n      const rel = linkHeader[1]\n        .split(`=`)[1]\n        .replace(/\"/g, ``);\n      links[rel] = link;\n      return links;\n    }, {});\n  }\n\n  /**\n   * Get next page\n   * @returns {Function}\n   */\n  next() {\n    return this.getLink(`next`);\n  }\n\n  /**\n   * Indicates if there's another page\n   * @returns {Boolean}\n   */\n  hasNext() {\n    return this.hasLink(`next`);\n  }\n\n  /**\n   * Get previous page\n   * @returns {Page}\n   */\n  previous() {\n    return this.getLink(`previous`);\n  }\n\n  /**\n   * Indicates if there is a previous Page\n   * @returns {Boolean}\n   */\n  hasPrevious() {\n    return this.hasLink(`previous`);\n  }\n\n  /**\n   * Retrieves the `Page` at url specified by `link`\n   * @param {string} link Specifies which link header to return\n   * @private\n   * @returns {Promise<Page>}\n   */\n  getLink(link) {\n    return this.spark.request({\n      uri: this.links[link]\n    })\n      .then((res) => new Page(res, this.spark));\n  }\n\n  /**\n   * Indicates if the specified link is in the link header\n   * @param {string} link\n   * @private\n   * @returns {Boolean}\n   */\n  hasLink(link) {\n    return Boolean(this.links[link]);\n  }\n\n  /**\n   * Iterator\n   * @returns {Object}\n   */\n  [Symbol.iterator]() {\n    let i = -1;\n    return {\n      next: () => {\n        i += 1;\n        if (i < this.length) {\n          return {\n            value: this.items[i]\n          };\n        }\n\n        return {done: true};\n      }\n    };\n  }\n}\n"]}