{"version":3,"sources":["../../src/plugins/webhooks.js"],"names":[],"mappings":";;;;;;AAMA;;;;AACA;;;;AAEA;;;;;;;;;;AAUA;;;;;;AAnBA;;;;;;AAyBA,IAAM,WAAW,uBAAY,MAAZ,CAAmB;AAClC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,QA/BkC,kBA+B3B,OA/B2B,EA+BlB;AACd,WAAO,KAAK,OAAL,CAAa;AAClB,oBADkB;AAElB,WAAQ,KAAK,MAAL,CAAY,eAApB,cAFkB;AAGlB,YAAM;AAHY,KAAb,EAKJ,IALI,CAKC,UAAC,GAAD;AAAA,aAAS,IAAI,IAAb;AAAA,KALD,CAAP;AAMD,GAtCiC;;;AAwClC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,KAtEkC,eAsE9B,OAtE8B,EAsErB;AACX,QAAM,KAAK,QAAQ,EAAR,IAAc,OAAzB;;AAEA,WAAO,KAAK,OAAL,CAAa;AAClB,WAAQ,KAAK,MAAL,CAAY,eAApB,kBAAgD;AAD9B,KAAb,EAGJ,IAHI,CAGC,UAAC,GAAD;AAAA,aAAS,IAAI,IAAJ,CAAS,KAAT,IAAkB,IAAI,IAA/B;AAAA,KAHD,CAAP;AAID,GA7EiC;;;AA+ElC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,MAjHkC,gBAiH7B,OAjH6B,EAiHpB;AAAA;;AACZ,WAAO,KAAK,OAAL,CAAa;AAClB,WAAQ,KAAK,MAAL,CAAY,eAApB,eADkB;AAElB,UAAI;AAFc,KAAb,EAIJ,IAJI,CAIC,UAAC,GAAD;AAAA,aAAS,mBAAS,GAAT,EAAc,MAAK,KAAnB,CAAT;AAAA,KAJD,CAAP;AAKD,GAvHiC;;;AAyHlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,QA7JkC,kBA6J3B,OA7J2B,EA6JlB;AACd,QAAM,KAAK,QAAQ,EAAR,IAAc,OAAzB;AACA,WAAO,KAAK,OAAL,CAAa;AAClB,sBADkB;AAElB,WAAQ,KAAK,MAAL,CAAY,eAApB,kBAAgD;AAF9B,KAAb,EAIJ,IAJI,CAIC,UAAC,GAAD,EAAS;AACb;AACA;AACA,UAAI,IAAI,UAAJ,KAAmB,GAAvB,EAA4B;AAC1B,eAAO,SAAP;AACD;AACD,aAAO,IAAI,IAAX;AACD,KAXI,CAAP;AAYD,GA3KiC;;;AA6KlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,QA/MkC,kBA+M3B,OA/M2B,EA+MlB;AACd,QAAM,KAAK,QAAQ,EAAnB;AACA,WAAO,KAAK,OAAL,CAAa;AAClB,mBADkB;AAElB,WAAQ,KAAK,MAAL,CAAY,eAApB,kBAAgD,EAF9B;AAGlB,YAAM;AAHY,KAAb,EAKJ,IALI,CAKC,UAAC,GAAD;AAAA,aAAS,IAAI,IAAb;AAAA,KALD,CAAP;AAMD;AAvNiC,CAAnB,CAAjB;;kBA0Ne,Q","file":"webhooks.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport Page from '../lib/page';\nimport {SparkPlugin} from '@ciscospark/spark-core';\n\n/**\n * @typedef {Object} Types~Webhook\n * @property {string} id - The unique ID for the webhook.\n * @property {string} resource - The resource type for the webhook.\n * @property {string} event - The event type for the webhook.\n * @property {string} filter - The filter that defines the webhook scope.\n * @property {string} targetUrl - The URL that receives POST requests for each event.\n * @property {string} name - A user-friendly name for this webhook.\n */\n\n/**\n * A webhook notifies an application when an event for which the application is\n * registered has occurred.\n * @class\n * @extends SparkPlugin\n */\nconst Webhooks = SparkPlugin.extend({\n  /**\n   * Posts a webhook.\n   * @instance\n   * @memberof Webhooks\n   * @param {Types~Webhook} webhook\n   * @returns {Promise<Webhook>}\n   * @example\n   * var ciscospark = require('../..');\n   * ciscospark.rooms.create({title: 'Create Webhook Example'})\n   *   .then(function(room) {\n   *     return ciscospark.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(webhook) {\n   *     var assert = require('assert');\n   *     assert(webhook.id);\n   *     assert(webhook.resource);\n   *     assert(webhook.event);\n   *     assert(webhook.filter);\n   *     assert(webhook.targetUrl);\n   *     assert(webhook.name);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(webhook) {\n    return this.request({\n      method: `POST`,\n      uri: `${this.config.hydraServiceUrl}/webhooks`,\n      body: webhook\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Shows details for a webhook.\n   * @instance\n   * @memberof Webhooks\n   * @param {Webhook|string} webhook\n   * @returns {Promise<Array<Webhook>>}\n   * @example\n   * var ciscospark = require('../..');\n   * var webhook;\n   * ciscospark.rooms.create({title: 'Get Webhook Example'})\n   *   .then(function(room) {\n   *     return ciscospark.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(w) {\n   *     webhook = w;\n   *     return ciscospark.webhooks.get(webhook.id);\n   *   })\n   *   .then(function(webhook2) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(webhook2, webhook);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(webhook) {\n    const id = webhook.id || webhook;\n\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/webhooks/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Lists all webhooks.\n   * @instance\n   * @memberof Webhooks\n   * @param {Object} options\n   * @param {integer} options.max Limit the maximum number of webhooks in the response.\n   * @returns {Promise<Webhook>}\n   * @example\n   * var ciscospark = require('../..');\n   * var room, webhook;\n   * ciscospark.rooms.create({title: 'List Webhooks Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(w) {\n   *     webhook = w;\n   *     return ciscospark.webhooks.list();\n   *   })\n   *   .then(function(webhooks) {\n   *     var assert = require('assert');\n   *     assert.equal(webhooks.items.filter(function(w) {\n   *       return w.id === webhook.id;\n   *     }).length, 1);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/webhooks/`,\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  },\n\n  /**\n   * Delete a webhook.\n   * @instance\n   * @memberof Webhooks\n   * @param {Webhook|string} webhook\n   * @returns {Promise}\n   * @example\n   * var ciscospark = require('../..');\n   * var room, webhook;\n   * ciscospark.rooms.create({title: 'Remove Webhook Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(w) {\n   *     webhook = w;\n   *     return ciscospark.webhooks.remove(webhook);\n   *   })\n   *   .then(function() {\n   *     return ciscospark.webhooks.list();\n   *   })\n   *   .then(function(webhooks) {\n   *     var assert = require('assert');\n   *     assert.equal(webhooks.items.filter(function(w) {\n   *       return w.id === webhook.id;\n   *     }).length, 0);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(webhook) {\n    const id = webhook.id || webhook;\n    return this.request({\n      method: `DELETE`,\n      uri: `${this.config.hydraServiceUrl}/webhooks/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n        return res.body;\n      });\n  },\n\n  /**\n   * Update a webhook.\n   * @instance\n   * @memberof Webhooks\n   * @param {Webhook} webhook\n   * @returns {Promise<Webhook>}\n   * @example\n   * var ciscospark = require('../..');\n   * var webhook;\n   * ciscospark.rooms.create({title: 'Webhook Example'})\n   *   .then(function(room) {\n   *     return ciscospark.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(w) {\n   *     webhook = w;\n   *     webhook.targetUrl = 'https://example.com/webhook/newtarget';\n   *     return ciscospark.webhooks.update(webhook);\n   *   })\n   *   .then(function() {\n   *     return ciscospark.webhooks.get(webhook);\n   *   })\n   *   .then(function(webhook) {\n   *     var assert = require('assert');\n   *     assert.equal(webhook.targetUrl, 'https://example.com/webhook/newtarget');\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  update(webhook) {\n    const id = webhook.id;\n    return this.request({\n      method: `PUT`,\n      uri: `${this.config.hydraServiceUrl}/webhooks/${id}`,\n      body: webhook\n    })\n      .then((res) => res.body);\n  }\n});\n\nexport default Webhooks;\n"]}