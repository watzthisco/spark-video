{"version":3,"sources":["../../src/plugins/teams.js"],"names":[],"mappings":";;;;;;AAMA;;;;AACA;;;;AAEA;;;;;;;;AAQA;;;;AAjBA;;;;;;AAqBA,IAAM,QAAQ,uBAAY,MAAZ,CAAmB;AAC/B;;;;;;;;;;;;;;;;;;;AAkBA,QAnB+B,kBAmBxB,IAnBwB,EAmBlB;AACX,WAAO,KAAK,OAAL,CAAa;AAClB,oBADkB;AAElB,WAAQ,KAAK,MAAL,CAAY,eAApB,WAFkB;AAGlB,YAAM;AAHY,KAAb,EAKJ,IALI,CAKC,UAAC,GAAD;AAAA,aAAS,IAAI,IAAb;AAAA,KALD,CAAP;AAMD,GA1B8B;;;AA4B/B;;;;;;;;;;;;;;;;;;;;;;AAsBA,KAlD+B,eAkD3B,IAlD2B,EAkDrB,OAlDqB,EAkDZ;AACjB,QAAM,KAAK,KAAK,EAAL,IAAW,IAAtB;;AAEA,WAAO,KAAK,OAAL,CAAa;AAClB,WAAQ,KAAK,MAAL,CAAY,eAApB,eAA6C,EAD3B;AAElB,UAAI;AAFc,KAAb,EAIJ,IAJI,CAIC,UAAC,GAAD;AAAA,aAAS,IAAI,IAAJ,CAAS,KAAT,IAAkB,IAAI,IAA/B;AAAA,KAJD,CAAP;AAKD,GA1D8B;;;AA4D/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,MA5F+B,gBA4F1B,OA5F0B,EA4FjB;AAAA;;AACZ,WAAO,KAAK,OAAL,CAAa;AAClB,WAAQ,KAAK,MAAL,CAAY,eAApB,YADkB;AAElB,UAAI;AAFc,KAAb,EAIJ,IAJI,CAIC,UAAC,GAAD;AAAA,aAAS,mBAAS,GAAT,EAAc,MAAK,KAAnB,CAAT;AAAA,KAJD,CAAP;AAKD,GAlG8B;;;AAoG/B;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,QA9H+B,kBA8HxB,IA9HwB,EA8HlB;AACX,QAAM,KAAK,KAAK,EAAhB;AACA,WAAO,KAAK,OAAL,CAAa;AAClB,mBADkB;AAElB,WAAQ,KAAK,MAAL,CAAY,eAApB,eAA6C,EAF3B;AAGlB,YAAM;AAHY,KAAb,EAKJ,IALI,CAKC,UAAC,GAAD;AAAA,aAAS,IAAI,IAAb;AAAA,KALD,CAAP;AAMD;AAtI8B,CAAnB,CAAd;;kBAyIe,K","file":"teams.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport Page from '../lib/page';\nimport {SparkPlugin} from '@ciscospark/spark-core';\n\n/**\n * @typedef {Object} Types~Team\n * @property {string} id - (server generated) The unique ID for the team.\n * @property {string} name - The name of the team.\n * @property {isoDate} created - (server generated) The date and time when the\n * team was created, in ISO8601 format.\n */\n\n/**\n* @class\n* @extends SparkPlugin\n */\nconst Teams = SparkPlugin.extend({\n  /**\n   * Create a new team.\n   * @instance\n   * @param {Types~Team} team\n   * @returns {Promise<Types~Team>}\n   * @memberof Teams\n   * @example\n   * var ciscospark = require('../..');\n   * ciscospark.teams.create({name: 'Create Team Example'})\n   *   .then(function(team) {\n   *     var assert = require('assert');\n   *     assert(team.id);\n   *     assert(team.name);\n   *     assert(team.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(team) {\n    return this.request({\n      method: `POST`,\n      uri: `${this.config.hydraServiceUrl}/teams`,\n      body: team\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single team\n   * @instance\n   * @param {Types~Team|string} team\n   * @param {object} options\n   * @returns {Promise<Types~Team>}\n   * @memberof Teams\n   * @example\n   * var ciscospark = require('../..');\n   * var team;\n   * ciscospark.teams.create({name: 'Get Team Example'})\n   *   .then(function(r) {\n   *     team = r;\n   *     return ciscospark.teams.get(team.id);\n   *   })\n   *   .then(function(team2) {\n   *     var assert = require('assert');\n   *     assert.equal(team2.id, team.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(team, options) {\n    const id = team.id || team;\n\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/teams/${id}`,\n      qs: options\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * List teams.\n   * @instance\n   * @param {object} options\n   * @param {object} options.max Limit the maximum number of teams in the\n   * response.\n   * @returns {Promise<Page<Types~Team>>}\n   * @memberof Teams\n   * @example\n   * var ciscospark = require('../..');\n   * var createdRooms;\n   * Promise.all([\n   *   ciscospark.teams.create({name: 'List Teams Example 1'}),\n   *   ciscospark.teams.create({name: 'List Teams Example 2'}),\n   *   ciscospark.teams.create({name: 'List Teams Example 3'})\n   * ])\n   *   .then(function(r) {\n   *     createdRooms = r;\n   *     return ciscospark.teams.list({max: 3});\n   *   })\n   *   .then(function(teams) {\n   *     var assert = require('assert');\n   *     assert(teams.length === 3);\n   *     for (var i = 0; i < teams.items.length; i++) {\n   *       assert(createdRooms.filter(function(room) {\n   *         return room.id === teams.items[i].id;\n   *       }).length === 1);\n   *     }\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/teams/`,\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  },\n\n  /**\n   * Update a team.\n   * @instance\n   * @param {Types~Team} team\n   * @returns {Promise<Types~Team>}\n   * @memberof Teams\n   * @example\n   * var ciscospark = require('../..');\n   * var teams;\n   * ciscospark.teams.create({name: 'Update Team Example'})\n   *   .then(function(r) {\n   *     teams = r;\n   *     teams.name = 'Teams Example (Updated Title)';\n   *     return ciscospark.teams.update(teams);\n   *   })\n   *   .then(function() {\n   *     return ciscospark.teams.get(teams.id);\n   *   })\n   *   .then(function(teams) {\n   *     var assert = require('assert');\n   *     assert.equal(teams.name, 'Teams Example (Updated Title)');\n   *     return 'success';\n   *   });\n   *   // => success\n\n   */\n  update(team) {\n    const id = team.id;\n    return this.request({\n      method: `PUT`,\n      uri: `${this.config.hydraServiceUrl}/teams/${id}`,\n      body: team\n    })\n      .then((res) => res.body);\n  }\n});\n\nexport default Teams;\n"]}