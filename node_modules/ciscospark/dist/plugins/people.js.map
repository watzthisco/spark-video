{"version":3,"sources":["../../src/plugins/people.js"],"names":[],"mappings":";;;;;;AAMA;;;;AACA;;;;AAEA;;;;;;;;AAQA;;;;AAjBA;;;;;;AAqBA,IAAM,SAAS,uBAAY,MAAZ,CAAmB;AAChC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,KAhCgC,eAgC5B,MAhC4B,EAgCpB;AACV,QAAM,KAAK,OAAO,QAAP,IAAmB,OAAO,EAA1B,IAAgC,MAA3C;AACA,WAAO,KAAK,OAAL,CAAa;AAClB,WAAQ,KAAK,MAAL,CAAY,eAApB,gBAA8C;AAD5B,KAAb,EAGJ,IAHI,CAGC,UAAC,GAAD;AAAA,aAAS,IAAI,IAAb;AAAA,KAHD,CAAP;AAID,GAtC+B;;;AAwChC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,MAhFgC,gBAgF3B,OAhF2B,EAgFlB;AAAA;;AACZ,WAAO,KAAK,OAAL,CAAa;AAClB,WAAQ,KAAK,MAAL,CAAY,eAApB,YADkB;AAElB,UAAI;AAFc,KAAb,EAIJ,IAJI,CAIC,UAAC,GAAD;AAAA,aAAS,mBAAS,GAAT,EAAc,MAAK,KAAnB,CAAT;AAAA,KAJD,CAAP;AAKD;AAtF+B,CAAnB,CAAf;;kBAyFe,M","file":"people.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport Page from '../lib/page';\nimport {SparkPlugin} from '@ciscospark/spark-core';\n\n/**\n * @typedef {Object} Types~Person\n * @property {uuid} id - Unique identifier for the person\n * @property {Array<email>} emails - Email addresses of the person\n * @property {string} displayName - Display name of the person\n * @property {isoDate} created - The date and time that the person was created\n */\n\n/**\n * @class\n * @extends SparkPlugin\n */\nconst People = SparkPlugin.extend({\n  /**\n   * Returns a single person by ID\n   * @instance\n   * @memberof People\n   * @param {Types~Person|uuid} person\n   * @returns {Promise<Types~Person>}\n   * @example\n   * var ciscospark = require('../..');\n   * ciscospark.rooms.create({title: 'Get Person Example'})\n   *   .then(function(room) {\n   *     return ciscospark.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(membership) {\n   *     return ciscospark.people.get(membership.personId);\n   *   })\n   *   .then(function(alice) {\n   *     var assert = require('assert');\n   *     assert(alice.id);\n   *     assert(Array.isArray(alice.emails));\n   *     assert.equal(alice.emails.filter(function(email) {\n   *       return email === 'alice@example.com';\n   *     }).length, 1);\n   *     assert(alice.displayName);\n   *     assert(alice.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(person) {\n    const id = person.personId || person.id || person;\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/people/${id}`\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a list of people\n   * @instance\n   * @memberof People\n   * @param {Object} options\n   * @param {email} options.email - Returns people with an email that contains this string\n   * @param {string} options.name - Returns people with a name that contains this string\n   * @returns {Promise<Page<Types~Person>>}\n   * @example\n   * var ciscospark = require('../..');\n   * var room;\n   * ciscospark.rooms.create({title: 'List People Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return ciscospark.memberships.create({\n   *       personEmail: 'bob@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return ciscospark.people.list({email: 'alice@example.com'});\n   *   })\n   *   .then(function(people) {\n   *     var assert = require('assert');\n   *     assert.equal(people.length, 1);\n   *     var person = people.items[0];\n   *     assert(person.id);\n   *     assert(Array.isArray(person.emails));\n   *     assert(person.displayName);\n   *     assert(person.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/people`,\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  }\n});\n\nexport default People;\n"]}