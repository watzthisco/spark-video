'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _apply = require('babel-runtime/core-js/reflect/apply');

var _apply2 = _interopRequireDefault(_apply);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _defaults = require('lodash/defaults');

var _defaults2 = _interopRequireDefault(_defaults);

var _isFunction = require('lodash/isFunction');

var _isFunction2 = _interopRequireDefault(_isFunction);

exports.default = makeRetryable;

var _events = require('events');

var _backoff = require('backoff');

var _backoff2 = _interopRequireDefault(_backoff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Makes a promise-returning method retryable according to the specified backoff
 * pattern
 * @param {Function} fn
 * @param {Object} options
 * @param {boolean} options.backoff
 * @param {number} options.delay
 * @param {number} options.initialDelay
 * @param {number} options.maxAttempts
 * @param {number} options.maxDelay
 *
 * @returns {Function}
 */
function makeRetryable(fn, options) {
  if (!(0, _isFunction2.default)(fn)) {
    throw new Error('`fn` must be a function');
  }

  options = options || {};

  (0, _defaults2.default)(options, {
    backoff: true,
    delay: 1,
    maxAttempts: 3
  });

  var strategyOptions = void 0;
  if (options.backoff) {
    strategyOptions = {
      initialDelay: options.delay,
      maxDelay: options.maxDelay
    };
  } else {
    strategyOptions = {
      initialDelay: 1,
      maxDelay: 1
    };
  }

  return function retry() {
    var _this = this;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var emitter = new _events.EventEmitter();
    var promise = new _promise2.default(function (resolve, reject) {
      // backoff.call is not Function.prototype.call; it's an unfortunate naming
      // collision.
      /* eslint prefer-reflect: [0] */
      var call = _backoff2.default.call(function (cb) {
        /* eslint no-invalid-this: [0] */
        var innerPromise = (0, _apply2.default)(_this, fn, args);

        if ((0, _isFunction2.default)(innerPromise.on)) {
          innerPromise.on('progress', emitter.emit.bind(emitter, 'progress'));
          innerPromise.on('upload-progress', emitter.emit.bind(emitter, 'upload-progress'));
          innerPromise.on('download-progress', emitter.emit.bind(emitter, 'download-progress'));
        }

        return innerPromise.then(function (res) {
          cb(null, res);
        }).catch(function (reason) {
          if (!reason) {
            reason = new Error('retryable method failed without providing an error object');
          }
          cb(reason);
        });
      }, function (err, res) {
        if (err) {
          return reject(err);
        }

        return resolve(res);
      });

      call.setStrategy(new _backoff2.default.ExponentialStrategy(strategyOptions));
      if (options.maxAttempts) {
        call.failAfter(options.maxAttempts - 1);
      }

      call.start();
    });

    promise.on = function on(key, callback) {
      emitter.on(key, callback);
      return promise;
    };

    return promise;
  };
} /**!
   *
   * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.
   */
//# sourceMappingURL=retry.js.map
