'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _apply = require('babel-runtime/core-js/reflect/apply');

var _apply2 = _interopRequireDefault(_apply);

var _isFunction = require('lodash/isFunction');

var _isFunction2 = _interopRequireDefault(_isFunction);

exports.default = oneFlight;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @memberof Util
 * @param {string}   name
 * @param {Function} fn
 * @param {Object}   options
 * @returns {Function}
 */
function oneFlight(name, fn, options) {
  if (!name) {
    throw new Error('`name` is required');
  }

  if (!fn) {
    throw new Error('`fn` is required');
  }

  options = options || {};

  return function oneFlightExecutor() {
    var _this = this;

    /* eslint no-invalid-this: [0] */
    var promiseName = void 0;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if ((0, _isFunction2.default)(name)) {
      promiseName = '$promise' + (0, _apply2.default)(name, this, args);
    } else {
      promiseName = '$promise' + name;
    }

    if (this[promiseName]) {
      var message = 'one flight: attempted to invoke ' + name + ' while previous invocation still in flight';

      /* instanbul ignore else */
      if (this && this.logger) {
        this.logger.info(message);
      } else {
        /* eslint no-console: [0] */
        console.info(message);
      }
      return this[promiseName];
    }

    var promise = this[promiseName] = (0, _apply2.default)(fn, this, args);

    if (!options.cacheFailure && promise && promise.catch) {
      promise.catch(function () {
        _this[promiseName] = null;
      });
    }

    if (!options.cacheSuccess && promise && promise.catch) {
      promise.then(function () {
        _this[promiseName] = null;
      });
    }

    return promise;
  };
} /**!
   *
   * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.
   */
//# sourceMappingURL=one-flight.js.map
