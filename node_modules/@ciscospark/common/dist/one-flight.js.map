{"version":3,"sources":["../src/one-flight.js"],"names":[],"mappings":";;;;;;;;;;;;;;kBAcwB,S;;;;AAPxB;;;;;;;AAOe,SAAS,SAAT,CAAmB,IAAnB,EAAyB,EAAzB,EAA6B,OAA7B,EAAsC;AACnD,MAAI,CAAC,IAAL,EAAW;AACT,UAAM,IAAI,KAAJ,sBAAN;AACD;;AAED,MAAI,CAAC,EAAL,EAAS;AACP,UAAM,IAAI,KAAJ,oBAAN;AACD;;AAED,YAAU,WAAW,EAArB;;AAEA,SAAO,SAAS,iBAAT,GAAoC;AAAA;;AACzC;AACA,QAAI,oBAAJ;;AAFyC,sCAAN,IAAM;AAAN,UAAM;AAAA;;AAGzC,QAAI,0BAAW,IAAX,CAAJ,EAAsB;AACpB,iCAAyB,qBAAc,IAAd,EAAoB,IAApB,EAA0B,IAA1B,CAAzB;AACD,KAFD,MAGK;AACH,iCAAyB,IAAzB;AACD;;AAED,QAAI,KAAK,WAAL,CAAJ,EAAuB;AACrB,UAAM,+CAA6C,IAA7C,+CAAN;;AAEA;AACA,UAAI,QAAQ,KAAK,MAAjB,EAAyB;AACvB,aAAK,MAAL,CAAY,IAAZ,CAAiB,OAAjB;AACD,OAFD,MAGK;AACH;AACA,gBAAQ,IAAR,CAAa,OAAb;AACD;AACD,aAAO,KAAK,WAAL,CAAP;AACD;;AAED,QAAM,UAAU,KAAK,WAAL,IAAoB,qBAAc,EAAd,EAAkB,IAAlB,EAAwB,IAAxB,CAApC;;AAEA,QAAI,CAAC,QAAQ,YAAT,IAAyB,OAAzB,IAAoC,QAAQ,KAAhD,EAAuD;AACrD,cAAQ,KAAR,CAAc,YAAM;AAClB,cAAK,WAAL,IAAoB,IAApB;AACD,OAFD;AAGD;;AAED,QAAI,CAAC,QAAQ,YAAT,IAAyB,OAAzB,IAAoC,QAAQ,KAAhD,EAAuD;AACrD,cAAQ,IAAR,CAAa,YAAM;AACjB,cAAK,WAAL,IAAoB,IAApB;AACD,OAFD;AAGD;;AAED,WAAO,OAAP;AACD,GAvCD;AAwCD,CAjED","file":"one-flight.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {isFunction} from 'lodash';\n\n/**\n * @memberof Util\n * @param {string}   name\n * @param {Function} fn\n * @param {Object}   options\n * @returns {Function}\n */\nexport default function oneFlight(name, fn, options) {\n  if (!name) {\n    throw new Error(`\\`name\\` is required`);\n  }\n\n  if (!fn) {\n    throw new Error(`\\`fn\\` is required`);\n  }\n\n  options = options || {};\n\n  return function oneFlightExecutor(...args) {\n    /* eslint no-invalid-this: [0] */\n    let promiseName;\n    if (isFunction(name)) {\n      promiseName = `$promise${Reflect.apply(name, this, args)}`;\n    }\n    else {\n      promiseName = `$promise${name}`;\n    }\n\n    if (this[promiseName]) {\n      const message = `one flight: attempted to invoke ${name} while previous invocation still in flight`;\n\n      /* instanbul ignore else */\n      if (this && this.logger) {\n        this.logger.info(message);\n      }\n      else {\n        /* eslint no-console: [0] */\n        console.info(message);\n      }\n      return this[promiseName];\n    }\n\n    const promise = this[promiseName] = Reflect.apply(fn, this, args);\n\n    if (!options.cacheFailure && promise && promise.catch) {\n      promise.catch(() => {\n        this[promiseName] = null;\n      });\n    }\n\n    if (!options.cacheSuccess && promise && promise.catch) {\n      promise.then(() => {\n        this[promiseName] = null;\n      });\n    }\n\n    return promise;\n  };\n}\n"]}