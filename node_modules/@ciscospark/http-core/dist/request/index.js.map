{"version":3,"sources":["../../src/request/index.js"],"names":[],"mappings":";;;;;;;;;;kBAYwB,O;;AAPxB;;;;AACA;;;;AAEA;;;;AARA;;;;;AAYe,SAAS,OAAT,CAAiB,OAAjB,EAA0B;AACvC,MAAI,QAAQ,GAAZ,EAAiB;AACf,YAAQ,GAAR,GAAc,QAAQ,GAAtB;AACA,YAAQ,GAAR,GAAc,IAAd;AACD;;AAED,UAAQ,OAAR,GAAkB,QAAQ,OAAR,IAAmB,EAArC;;AAEA,UAAQ,QAAR,GAAmB,0BAAnB;AACA,UAAQ,MAAR,GAAiB,0BAAjB;;AAEA,SAAO,UAAU,QAAQ,YAAlB,aACJ,IADI,CACC;AAAA,sCAAI,IAAJ;AAAI,UAAJ;AAAA;;AAAA,WAAa,oCAAS,OAAT,SAAqB,IAArB,EAAb;AAAA,GADD,EAEJ,IAFI,CAEC;AAAA,uCAAI,IAAJ;AAAI,UAAJ;AAAA;;AAAA,WAAa,4BAAU,QAAQ,YAAR,CAAqB,KAArB,GAA6B,OAA7B,EAAV,qBAAiE,IAAjE,EAAb;AAAA,GAFD,CAAP;;AAIA;;;;;;;AAOA,WAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC,EAAsC,GAAtC,EAA2C;AACzC,QAAM,oBAAkB,GAAxB;AACA,QAAM,kBAAgB,GAAhB,UAAN;;AAEA,WAAO,aAAa,MAAb,CAAoB,UAAC,OAAD,EAAU,WAAV;AAAA,aAA0B,QAAQ,IAAR,CACjD,UAAC,MAAD,EAAY;AACV,YAAI,YAAY,UAAZ,CAAJ,EAA6B;AAC3B,iBAAO,YAAY,UAAZ,EAAwB,OAAxB,EAAiC,MAAjC,CAAP;AACD;AACD,eAAO,kBAAQ,OAAR,CAAgB,MAAhB,CAAP;AACD,OANgD,EAOjD,UAAC,MAAD,EAAY;AACV,YAAI,YAAY,QAAZ,CAAJ,EAA2B;AACzB,iBAAO,YAAY,QAAZ,EAAsB,OAAtB,EAA+B,MAA/B,CAAP;AACD;AACD,eAAO,kBAAQ,MAAR,CAAe,MAAf,CAAP;AACD,OAZgD,CAA1B;AAAA,KAApB,EAaF,kBAAQ,OAAR,CAAgB,GAAhB,CAbE,CAAP;AAcD;AACF","file":"index.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport _request from './request';\nimport {EventEmitter} from 'events';\n\n/**\n * @param {Object} options\n * @returns {Promise}\n */\nexport default function request(options) {\n  if (options.url) {\n    options.uri = options.url;\n    options.url = null;\n  }\n\n  options.headers = options.headers || {};\n\n  options.download = new EventEmitter();\n  options.upload = new EventEmitter();\n\n  return intercept(options.interceptors, `Request`)\n    .then((...args) => _request(options, ...args))\n    .then((...args) => intercept(options.interceptors.slice().reverse(), `Response`, ...args));\n\n  /**\n   * @param {Array} interceptors\n   * @param {string} key\n   * @param {Object} res\n   * @private\n   * @returns {Promise}\n   */\n  function intercept(interceptors, key, res) {\n    const successKey = `on${key}`;\n    const errorKey = `on${key}Error`;\n\n    return interceptors.reduce((promise, interceptor) => promise.then(\n        (result) => {\n          if (interceptor[successKey]) {\n            return interceptor[successKey](options, result);\n          }\n          return Promise.resolve(result);\n        },\n        (reason) => {\n          if (interceptor[errorKey]) {\n            return interceptor[errorKey](options, reason);\n          }\n          return Promise.reject(reason);\n        }\n      ), Promise.resolve(res));\n  }\n}\n"]}