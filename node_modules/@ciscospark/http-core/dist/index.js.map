{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAoDQ,O;;;;;;;;;gDACA,O;;;;;;;;;8CACA,O;;;;AAhDR;;;;;+CAiDQ,O;;;;;;AAhDR;;;;;;AAEA;AACA,IAAM,eAAe,qBAAM,SAAS,YAAT,CAAsB,cAAtB,EAAsC,OAAtC,EAA+C;AACxE;AACA;AACA,MAAI,wBAAS,OAAT,CAAJ,EAAuB;AACrB,QAAM,MAAM,OAAZ;AACA;AACA,cAAU,UAAU,CAAV,KAAgB,EAA1B;AACA,YAAQ,GAAR,GAAc,GAAd;AACD;;AAED;AACA,mDAKE,OALF,CAKU,UAAC,IAAD,EAAU;AAClB,QAAI,aAAa,wCAAiC,OAAjC,EAA0C,IAA1C,CAAjB;AACA,iBAAa,sBAAO,EAAP,EAAW,UAAX,EAAuB;AAClC,kBAAY,KADsB;AAElC,gBAAU;AAFwB,KAAvB,CAAb;AAIA,kCAAuB,OAAvB,EAAgC,IAAhC,EAAsC,UAAtC;AACD,GAZD;;AAcA,0BAAe,OAAf,EAAwB,cAAxB;;AAEA,UAAQ,MAAR,GAAiB,QAAQ,MAAR,IAAkB,OAAnC;;AAEA,SAAO,uBAAS,OAAT,CAAP;AACD,CA9BoB,CAArB,CAVA;;;;;AA0CA,IAAM,iBAAiB;AACrB,QAAM,IADe;AAErB,gBAAc;AACZ;AACA,uBAAsB,MAAtB,EAFY;AAFO,CAAvB;;AAQO,IAAM,8BAAW,YAAjB;AACA,IAAM,4BAAU,aAAa,cAAb,CAAhB","file":"index.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {assign, curry, defaults as lodashDefaults, isString} from 'lodash';\nimport HttpStatusInterceptor from './interceptors/http-status';\nimport _request from './request';\n\n// Curry protorequest so we generate a function with default options built in.\nconst protorequest = curry(function protorequest(defaultOptions, options) {\n  // allow for options to be a string (and therefore expect options in the third\n  // position) to match request's api.\n  if (isString(options)) {\n    const uri = options;\n    /* eslint prefer-rest-params: [0] */\n    options = arguments[2] || {};\n    options.uri = uri;\n  }\n\n  // Hide useless elements from logs\n  [\n    `download`,\n    `interceptors`,\n    `logger`,\n    `upload`\n  ].forEach((prop) => {\n    let descriptor = Reflect.getOwnPropertyDescriptor(options, prop);\n    descriptor = assign({}, descriptor, {\n      enumerable: false,\n      writable: true\n    });\n    Reflect.defineProperty(options, prop, descriptor);\n  });\n\n  lodashDefaults(options, defaultOptions);\n\n  options.logger = options.logger || console;\n\n  return _request(options);\n});\n\nconst defaultOptions = {\n  json: true,\n  interceptors: [\n    // Reminder: this is supposed to be an instantiated interceptor.\n    HttpStatusInterceptor.create()\n  ]\n};\n\nexport const defaults = protorequest;\nexport const request = protorequest(defaultOptions);\nexport {default as ProgressEvent} from './progress-event';\nexport {default as Interceptor} from './lib/interceptor';\nexport {default as HttpError} from './http-error';\nexport {default as HttpStatusInterceptor} from './interceptors/http-status';\n"]}