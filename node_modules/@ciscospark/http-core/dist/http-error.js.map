{"version":3,"sources":["../src/http-error.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;AACA;;;;;;AAGA;;;;AATA;;;;;AAaA,IAAM,YAAY,2BAAY;AAC5B,WAAS,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AAC7B;AACA,QAAI,OAAO,IAAI,IAAf;AACA,QAAI,gBAAJ;AACA,mBAAe,IAAf,uDAAe,IAAf;AACA;AACE,YAAI;AACF,iBAAO,KAAK,KAAL,CAAW,IAAX,CAAP;AACA,oBAAU,YAAY,IAAZ,CAAV;AACD,SAHD,CAIA,OAAO,KAAP,EAAc;AACZ,oBAAU,IAAV;AACD;AACD;AACF;AACE,kBAAU,YAAY,IAAZ,CAAV;AACA;AACF;AACE;AAdF;;AAiBA,QAAI,CAAC,OAAL,EAAc;AACZ,gBAAU,KAAK,cAAf;AACD;;AAED,oCAAwB,IAAxB,EAA8B;AAC5B,YAAM;AACJ,oBAAY,KADR;AAEJ,eAAO;AAFH,OADsB;AAK5B,mBAAa;AACX,oBAAY,KADD;AAEX,eAAO,IAAI;AAFA,OALe;AAS5B,eAAS;AACP,oBAAY,KADL;AAEP,eAAO,IAAI,OAAJ,IAAe;AAFf,OATmB;AAa5B,kBAAY;AACV,oBAAY,KADF;AAEV,eAAO,IAAI,UAAJ,IAAkB;AAFf,OAbgB;AAiB5B,gBAAU;AACR,oBAAY,KADJ;AAER,eAAO,IAAI,QAAJ,IAAgB;AAFf,OAjBkB;AAqB5B,mBAAa;AACX,oBAAY,KADD;AAEX,eAAO,IAAI,WAAJ,IAAmB;AAFf,OArBe;AAyB5B,cAAQ;AACN,oBAAY,KADN;AAEN,eAAO,IAAI;AAFL,OAzBoB;AA6B5B,WAAK;AACH,oBAAY,KADT;AAEH,eAAO,IAAI;AAFR,OA7BuB;AAiC5B,kBAAY;AACV,oBAAY,KADF;AAEV,eAAO,IAAI;AAFD,OAjCgB;AAqC5B,qBAAe;AACb,oBAAY,KADC;AAEb,eAAO,IAAI;AAFE,OArCa;AAyC5B,cAAQ;AACN,oBAAY,KADN;AAEN,eAAO,IAAI;AAFL,OAzCoB;AA6C5B,YAAM;AACJ,oBAAY,KADR;AAEJ,eAAO;AAFH;AA7CsB,KAA9B;;AAmDA,WAAO,OAAP;AACD,GA9E2B;AA+E5B,cAAY;AACV;AADU,GA/EgB;AAkF5B;AAlF4B,CAAZ,CAAlB;;AAqFA;;;;;AAKA,SAAS,WAAT,CAAqB,IAArB,EAA2B;AACzB;AACA,MAAM,WAAW,sBAAc,oBAAK,IAAL,wEAAd,CAAjB;;AAEA;AACA,MAAI,SAAS,MAAT,KAAoB,CAAxB,EAA2B;AACzB,WAAO,yBAAe,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAP;AACD;;AAED;AACA,MAAM,UAAU,SAAS,CAAT,CAAhB;;AAEA;AACA,MAAI,OAAO,OAAP,aAAJ,EAAiC;AAC/B,WAAO,YAAY,OAAZ,CAAP;AACD;;AAED;AACA,SAAO,OAAP;AACD;;AAGD,iCAAa,SAAb;AACA,UAAU,YAAV;;kBAEe,S","file":"http-error.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport extendError from 'extend-error';\nimport makeSubTypes from './http-error-subtypes';\nimport {pick} from 'lodash';\n\n/**\n * @class HttpError\n * @extends Error\n */\nconst HttpError = extendError({\n  parseFn: function parseFn(res) {\n    /* eslint complexity: [0] */\n    let body = res.body;\n    let message;\n    switch (typeof body) {\n    case `string`:\n      try {\n        body = JSON.parse(body);\n        message = parseObject(body);\n      }\n      catch (error) {\n        message = body;\n      }\n      break;\n    case `object`:\n      message = parseObject(body);\n      break;\n    default:\n      // do nothing\n    }\n\n    if (!message) {\n      message = this.defaultMessage;\n    }\n\n    Object.defineProperties(this, {\n      body: {\n        enumerable: false,\n        value: body\n      },\n      httpVersion: {\n        enumerable: false,\n        value: res.httpVersion\n      },\n      headers: {\n        enumerable: false,\n        value: res.headers || {}\n      },\n      rawHeaders: {\n        enumerable: false,\n        value: res.rawHeaders || []\n      },\n      trailers: {\n        enumerable: false,\n        value: res.trailers || {}\n      },\n      rawTrailers: {\n        enumerable: false,\n        value: res.rawTrailers || []\n      },\n      method: {\n        enumerable: false,\n        value: res.method\n      },\n      url: {\n        enumerable: false,\n        value: res.url\n      },\n      statusCode: {\n        enumerable: false,\n        value: res.statusCode\n      },\n      statusMessage: {\n        enumerable: false,\n        value: res.statusMessage\n      },\n      socket: {\n        enumerable: false,\n        value: res.socket\n      },\n      _res: {\n        enumerable: false,\n        value: res\n      }\n    });\n\n    return message;\n  },\n  properties: {\n    defaultMessage: `An error was received while trying to fulfill the request`\n  },\n  subTypeName: `HttpError`\n});\n\n/**\n * @param {object} body\n * @private\n * @returns {string}\n */\nfunction parseObject(body) {\n  // Search body for common names of error strings\n  const messages = Object.values(pick(body, `message`, `error`, `errorString`, `response`, `errorResponse`, `msg`));\n\n  // If no error candidate was found, stringify the entire body\n  if (messages.length === 0) {\n    return JSON.stringify(body, null, 2);\n  }\n\n  // Assume the first key found was the error explanation\n  const message = messages[0];\n\n  // If the explanation is an object, recurse and try again\n  if (typeof message === `object`) {\n    return parseObject(message);\n  }\n\n  // Return the first key\n  return message;\n}\n\n\nmakeSubTypes(HttpError);\nHttpError.makeSubTypes = makeSubTypes;\n\nexport default HttpError;\n"]}