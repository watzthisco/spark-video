{"version":3,"sources":["../../src/device/feature-model.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;AAGA,IAAM,eAAe,yBAAS,MAAT,CAAgB;AACnC,SAAO;AACL,iBADK;AAEL,wBAFK;AAGL,sBAHK;AAIL,kBAJK;AAKL,iBALK;AAML;AANK,GAD4B;;AAUnC,aAVmC,uBAUvB,KAVuB,EAUhB,OAVgB,EAUP;AAC1B,cAAU,WAAW,EAArB;AACA,4BAAS,OAAT,EAAkB,EAAC,OAAO,IAAR,EAAlB;AACA,WAAO,qBAAc,yBAAS,SAAT,CAAmB,WAAjC,EAA8C,IAA9C,EAAoD,CAAC,KAAD,EAAQ,OAAR,CAApD,CAAP;AACD,GAdkC;;;AAgBnC,oBAhBmC;;AAkBnC,OAlBmC,iBAkB7B,KAlB6B,EAkBtB;AACX,QAAI,CAAC,KAAL,EAAY;AACV,aAAO,EAAP;AACD;;AAED,QAAM,MAAM,OAAO,MAAM,GAAb,CAAZ;AACA,QAAI,MAAM,GAAN,IAAa,CAAC,qBAAa,GAAb,CAAlB,EAAqC;AACnC;AACA,YAAM,KAAN,GAAc,GAAd;AACA,YAAM,IAAN;AACD;AACD;AALA,SAMK,IAAI,MAAM,GAAN,WAAJ,EAA0B;AAC7B,cAAM,KAAN,GAAc,IAAd;AACA,cAAM,IAAN;AACD,OAHI,MAIA,IAAI,MAAM,GAAN,YAAJ,EAA2B;AAC9B,cAAM,KAAN,GAAc,KAAd;AACA,cAAM,IAAN;AACD;AACD;AAJK,WAKA;AACH,gBAAM,KAAN,GAAc,MAAM,GAApB;AACA,gBAAM,IAAN;AACD;;AAED,WAAO,KAAP;AACD,GA7CkC;AA+CnC,WA/CmC,uBA+ChB;AAAA,sCAAN,IAAM;AAAN,UAAM;AAAA;;AACjB,QAAM,QAAQ,qBAAc,yBAAS,SAAT,CAAmB,SAAjC,EAA4C,IAA5C,EAAkD,IAAlD,CAAd;AACA,QAAI,MAAM,YAAV,EAAwB;AACtB,YAAM,YAAN,GAAsB,IAAI,IAAJ,CAAS,MAAM,YAAf,CAAD,CAA+B,WAA/B,EAArB;AACD;;AAED,WAAO,KAAP;AACD,GAtDkC;;;AAwDnC;AACA;AACA;AACA,KA3DmC,eA2D/B,GA3D+B,EA2D1B,KA3D0B,EA2DnB,OA3DmB,EA2DV;AACvB,QAAI,cAAJ;AACA;AACA;AACA;AACA;AACA,QAAI,wBAAS,GAAT,KAAiB,QAAQ,IAA7B,EAAmC;AACjC,cAAQ,GAAR;AACA,gBAAU,KAAV;AACD,KAHD,MAIK;AACH,cAAQ,EAAR;AACA,YAAM,GAAN,IAAa,KAAb;AACD;;AAED,YAAQ,KAAK,KAAL,CAAW,KAAX,EAAkB,OAAlB,CAAR;AACA,WAAO,qBAAc,yBAAS,SAAT,CAAmB,GAAjC,EAAsC,IAAtC,EAA4C,CAAC,KAAD,EAAQ,OAAR,CAA5C,CAAP;AACD;AA5EkC,CAAhB,CAArB,CARA;;;;;kBAuFe,Y","file":"feature-model.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport AmpState from 'ampersand-state';\nimport {defaults, isObject} from 'lodash';\n\nconst FeatureModel = AmpState.extend({\n  props: {\n    key: `string`,\n    lastModified: `date`,\n    mutable: `boolean`,\n    type: `string`,\n    val: `string`,\n    value: `any`\n  },\n\n  constructor(attrs, options) {\n    options = options || {};\n    defaults(options, {parse: true});\n    return Reflect.apply(AmpState.prototype.constructor, this, [attrs, options]);\n  },\n\n  idAttribute: `key`,\n\n  parse(attrs) {\n    if (!attrs) {\n      return {};\n    }\n\n    const num = Number(attrs.val);\n    if (attrs.val && !Number.isNaN(num)) {\n      // Handle numbers.\n      attrs.value = num;\n      attrs.type = `number`;\n    }\n    // Handle booleans.\n    else if (attrs.val === `true`) {\n      attrs.value = true;\n      attrs.type = `boolean`;\n    }\n    else if (attrs.val === `false`) {\n      attrs.value = false;\n      attrs.type = `boolean`;\n    }\n    // It must be a string, so return it.\n    else {\n      attrs.value = attrs.val;\n      attrs.type = `string`;\n    }\n\n    return attrs;\n  },\n\n  serialize(...args) {\n    const attrs = Reflect.apply(AmpState.prototype.serialize, this, args);\n    if (attrs.lastModified) {\n      attrs.lastModified = (new Date(attrs.lastModified)).toISOString();\n    }\n\n    return attrs;\n  },\n\n  // Override set to make sure we always run features through parse()\n  // See https://github.com/AmpersandJS/ampersand-state/issues/146 for related\n  // bug\n  set(key, value, options) {\n    let attrs;\n    // Handle both `\"key\", value` and `{key: value}` -style arguments.\n    // The next block is a direct copy from ampersand-state, so no need to test\n    // both scenarios.\n    /* istanbul ignore next */\n    if (isObject(key) || key === null) {\n      attrs = key;\n      options = value;\n    }\n    else {\n      attrs = {};\n      attrs[key] = value;\n    }\n\n    attrs = this.parse(attrs, options);\n    return Reflect.apply(AmpState.prototype.set, this, [attrs, options]);\n  }\n});\n\nexport default FeatureModel;\n"]}