{"version":3,"sources":["../../src/device/device.js"],"names":[],"mappings":"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","file":"device.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {oneFlight} from '@ciscospark/common';\nimport {SparkPlugin} from '@ciscospark/spark-core';\nimport {omit} from 'lodash';\nimport util from 'util';\nimport FeaturesModel from './features-model';\n\nconst Device = SparkPlugin.extend({\n  children: {\n    features: FeaturesModel\n  },\n\n  idAttribute: `url`,\n\n  namespace: `Device`,\n\n  props: {\n    modificationTime: `string`,\n    services: {\n      // Even though @jodykstr will tell you the docs claim you don't need to\n      // initialize `object` properties, the docs lie.\n      default() {\n        return {};\n      },\n      type: `object`\n    },\n    url: `string`,\n    userId: `string`,\n    webSocketUrl: `string`\n  },\n\n  derived: {\n    registered: {\n      deps: [`url`],\n      fn() {\n        return Boolean(this.url);\n      }\n    }\n  },\n\n  getServiceUrl(service) {\n    return this._getServiceUrl(this.services, service)\n      .then((isServiceUrl) => isServiceUrl || this.getPreDiscoveryServiceUrl(service));\n  },\n\n  getPreDiscoveryServiceUrl(service) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._getServiceUrl(this.config.preDiscoveryServices, service));\n  },\n\n  initialize(...args) {\n    Reflect.apply(SparkPlugin.prototype.initialize, this, args);\n\n    // Propagate change(:[attribute]) events from collections\n    [`developer`, `entitlement`, `user`].forEach((collectionName) => {\n      this.features.on(`change:${collectionName}`, (model, value, options) => {\n        this.trigger(`change`, this, options);\n        this.trigger(`change:features`, this, this.features, options);\n      });\n    });\n  },\n\n  /**\n   * Don't log the features object\n   * @param {number} depth\n   * @returns {Object}\n   */\n  inspect(depth) {\n    return util.inspect(omit(this.serialize(), `features`), {depth});\n  },\n\n  isPreDiscoveryService(service) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._isService(this.config.preDiscoveryServices, service));\n  },\n\n  isPreDiscoveryServiceUrl(uri) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._isServiceUrl(this.config.preDiscoveryServices, uri));\n  },\n\n  isService(service) {\n    return this._isService(this.services, service)\n      .then((isService) => isService || this.isPreDiscoveryService(service));\n  },\n\n  isServiceUrl(uri) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._isServiceUrl(this.services, uri))\n      .then((isService) => isService || this.isPreDiscoveryServiceUrl(uri));\n  },\n\n  _getServiceUrl(target, service) {\n    /* istanbul ignore if */\n    if (!target) {\n      return Promise.reject(new Error(`\\`target\\` is a required parameter`));\n    }\n\n    if (!service) {\n      return Promise.reject(new Error(`\\`service\\` is a required parameter`));\n    }\n\n    return Promise.resolve(target[`${service}ServiceUrl`]);\n  },\n\n  _isService(target, service) {\n    return this._getServiceUrl(target, service)\n      .then((url) => Boolean(url));\n  },\n\n  _isServiceUrl(target, uri) {\n    if (!uri) {\n      return Promise.reject(new Error(`\\`uri\\` is a required parameter`));\n    }\n\n    for (const key in target) {\n      if (target[key] && uri.indexOf(target[key]) === 0) {\n        return Promise.resolve(true);\n      }\n    }\n\n    return Promise.resolve(false);\n  },\n\n  refresh: oneFlight(`refresh`, function refresh() {\n    this.logger.info(`device: refreshing`);\n\n    if (!this.registered) {\n      this.logger.info(`device: device not registered, refreshing`);\n      return this.register();\n    }\n\n    this.logger.info(`device: refreshing`);\n\n    return this.request({\n      method: `PUT`,\n      uri: this.url,\n      body: omit(this.serialize(), `features`, `mediaClusters`)\n    })\n      .then((res) => this._processRegistrationSuccess(res))\n      .catch((reason) => {\n        if (reason.statusCode === 404) {\n          // If we get a 404, it means the device is no longer valid and we need\n          // to register a new one.\n          this.logger.info(`device: refresh failed with 404, attempting to register new device`);\n          this.clear();\n          return this.register();\n        }\n        return Promise.reject(reason);\n      });\n  }),\n\n  register: oneFlight(`register`, function register() {\n    /* eslint no-invalid-this: [0] */\n    this.logger.info(`device: registering`);\n\n    if (this.registered) {\n      this.logger.info(`device: device already registered, refreshing`);\n      return this.refresh();\n    }\n\n    return this.request({\n      method: `POST`,\n      api: `wdm`,\n      resource: `devices`,\n      body: this.config.defaults\n    })\n      .then((res) => this._processRegistrationSuccess(res));\n  }),\n\n  _processRegistrationSuccess(res) {\n    this.logger.info(`device: received registration payload`);\n    this.set(res.body);\n  }\n});\n\nexport default Device;\n"]}