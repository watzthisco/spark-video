'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _apply = require('babel-runtime/core-js/reflect/apply');

var _apply2 = _interopRequireDefault(_apply);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _common = require('@ciscospark/common');

var _sparkCore = require('@ciscospark/spark-core');

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _featuresModel = require('./features-model');

var _featuresModel2 = _interopRequireDefault(_featuresModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**!
 *
 * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.
 */

var Device = _sparkCore.SparkPlugin.extend({
  children: {
    features: _featuresModel2.default
  },

  idAttribute: 'url',

  namespace: 'Device',

  props: {
    modificationTime: 'string',
    services: {
      // Even though @jodykstr will tell you the docs claim you don't need to
      // initialize `object` properties, the docs lie.

      default: function _default() {
        return {};
      },

      type: 'object'
    },
    url: 'string',
    userId: 'string',
    webSocketUrl: 'string'
  },

  derived: {
    registered: {
      deps: ['url'],
      fn: function fn() {
        return Boolean(this.url);
      }
    }
  },

  getServiceUrl: function getServiceUrl(service) {
    var _this = this;

    return this._getServiceUrl(this.services, service).then(function (isServiceUrl) {
      return isServiceUrl || _this.getPreDiscoveryServiceUrl(service);
    });
  },
  getPreDiscoveryServiceUrl: function getPreDiscoveryServiceUrl(service) {
    // The Promise.resolve here is temporary. A future PR will make the
    // corresponding _ method async to allow for lazy device registration
    return _promise2.default.resolve(this._getServiceUrl(this.config.preDiscoveryServices, service));
  },
  initialize: function initialize() {
    var _this2 = this;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    (0, _apply2.default)(_sparkCore.SparkPlugin.prototype.initialize, this, args);

    // Propagate change(:[attribute]) events from collections
    ['developer', 'entitlement', 'user'].forEach(function (collectionName) {
      _this2.features.on('change:' + collectionName, function (model, value, options) {
        _this2.trigger('change', _this2, options);
        _this2.trigger('change:features', _this2, _this2.features, options);
      });
    });
  },


  /**
   * Don't log the features object
   * @param {number} depth
   * @returns {Object}
   */
  inspect: function inspect(depth) {
    return _util2.default.inspect((0, _omit2.default)(this.serialize(), 'features'), { depth: depth });
  },
  isPreDiscoveryService: function isPreDiscoveryService(service) {
    // The Promise.resolve here is temporary. A future PR will make the
    // corresponding _ method async to allow for lazy device registration
    return _promise2.default.resolve(this._isService(this.config.preDiscoveryServices, service));
  },
  isPreDiscoveryServiceUrl: function isPreDiscoveryServiceUrl(uri) {
    // The Promise.resolve here is temporary. A future PR will make the
    // corresponding _ method async to allow for lazy device registration
    return _promise2.default.resolve(this._isServiceUrl(this.config.preDiscoveryServices, uri));
  },
  isService: function isService(service) {
    var _this3 = this;

    return this._isService(this.services, service).then(function (isService) {
      return isService || _this3.isPreDiscoveryService(service);
    });
  },
  isServiceUrl: function isServiceUrl(uri) {
    var _this4 = this;

    // The Promise.resolve here is temporary. A future PR will make the
    // corresponding _ method async to allow for lazy device registration
    return _promise2.default.resolve(this._isServiceUrl(this.services, uri)).then(function (isService) {
      return isService || _this4.isPreDiscoveryServiceUrl(uri);
    });
  },
  _getServiceUrl: function _getServiceUrl(target, service) {
    /* istanbul ignore if */
    if (!target) {
      return _promise2.default.reject(new Error('`target` is a required parameter'));
    }

    if (!service) {
      return _promise2.default.reject(new Error('`service` is a required parameter'));
    }

    return _promise2.default.resolve(target[service + 'ServiceUrl']);
  },
  _isService: function _isService(target, service) {
    return this._getServiceUrl(target, service).then(function (url) {
      return Boolean(url);
    });
  },
  _isServiceUrl: function _isServiceUrl(target, uri) {
    if (!uri) {
      return _promise2.default.reject(new Error('`uri` is a required parameter'));
    }

    for (var key in target) {
      if (target[key] && uri.indexOf(target[key]) === 0) {
        return _promise2.default.resolve(true);
      }
    }

    return _promise2.default.resolve(false);
  },


  refresh: (0, _common.oneFlight)('refresh', function refresh() {
    var _this5 = this;

    this.logger.info('device: refreshing');

    if (!this.registered) {
      this.logger.info('device: device not registered, refreshing');
      return this.register();
    }

    this.logger.info('device: refreshing');

    return this.request({
      method: 'PUT',
      uri: this.url,
      body: (0, _omit2.default)(this.serialize(), 'features', 'mediaClusters')
    }).then(function (res) {
      return _this5._processRegistrationSuccess(res);
    }).catch(function (reason) {
      if (reason.statusCode === 404) {
        // If we get a 404, it means the device is no longer valid and we need
        // to register a new one.
        _this5.logger.info('device: refresh failed with 404, attempting to register new device');
        _this5.clear();
        return _this5.register();
      }
      return _promise2.default.reject(reason);
    });
  }),

  register: (0, _common.oneFlight)('register', function register() {
    var _this6 = this;

    /* eslint no-invalid-this: [0] */
    this.logger.info('device: registering');

    if (this.registered) {
      this.logger.info('device: device already registered, refreshing');
      return this.refresh();
    }

    return this.request({
      method: 'POST',
      api: 'wdm',
      resource: 'devices',
      body: this.config.defaults
    }).then(function (res) {
      return _this6._processRegistrationSuccess(res);
    });
  }),

  _processRegistrationSuccess: function _processRegistrationSuccess(res) {
    this.logger.info('device: received registration payload');
    this.set(res.body);
  }
});

exports.default = Device;
//# sourceMappingURL=device.js.map
