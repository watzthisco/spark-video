{"version":3,"sources":["../../src/interceptors/auth.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;AAEA;;;;IAGqB,qB;;;;;;;;;;;;AASnB;;;;wCAIoB,O,EAAS;AAC3B,UAAI,QAAQ,GAAR,CAAY,QAAZ,CAAqB,KAAK,KAAL,CAAW,MAAX,CAAkB,WAAlB,CAA8B,KAA9B,CAAoC,QAAzD,CAAJ,EAAwE;AACtE,eAAO,kBAAQ,OAAR,CAAgB,KAAhB,CAAP;AACD;;AAED,UAAI,QAAQ,GAAR,CAAY,QAAZ,CAAqB,KAAK,KAAL,CAAW,MAAX,CAAkB,WAAlB,CAA8B,KAA9B,CAAoC,YAAzD,CAAJ,EAA4E;AAC1E,eAAO,kBAAQ,OAAR,CAAgB,KAAhB,CAAP;AACD;;AAED,UAAI,QAAQ,GAAR,CAAY,QAAZ,CAAqB,KAAK,KAAL,CAAW,MAAX,CAAkB,WAAlB,CAA8B,OAAnD,CAAJ,EAAiE;AAC/D,eAAO,kBAAQ,OAAR,CAAgB,KAAhB,CAAP;AACD;;AAED,UAAI,QAAQ,OAAR,IAAmB,KAAK,KAAL,CAAW,MAAX,CAAkB,SAAlB,CAA4B,QAAQ,OAApC,CAAvB,EAAqE;AACnE,eAAO,kBAAQ,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED,UAAI,QAAQ,GAAR,IAAe,KAAK,KAAL,CAAW,MAAX,CAAkB,YAAlB,CAA+B,QAAQ,GAAvC,CAAnB,EAAgE;AAC9D,eAAO,kBAAQ,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED,aAAO,kBAAQ,OAAR,CAAgB,KAAhB,CAAP;AACD;;AAED;;;;;;;gDAI4B;AAC1B,aAAO,KAAP;AACD;;;;AA1CD;;;6BAGgB;AACd;AACA,aAAO,IAAI,qBAAJ,CAA0B,EAAC,OAAO,IAAR,EAA1B,CAAP;AACD;;;8BAjBH;;;;;kBAUqB,qB","file":"auth.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {AuthInterceptor} from '@ciscospark/spark-core';\n\n/**\n * @class\n */\nexport default class DeviceAuthInterceptor extends AuthInterceptor {\n  /**\n   * @returns {DeviceAuthInterceptor}\n   */\n  static create() {\n    /* eslint no-invalid-this: [0] */\n    return new DeviceAuthInterceptor({spark: this});\n  }\n\n  /**\n   * @param {Object} options\n   * @returns {Promise<boolean>}\n   */\n  requiresCredentials(options) {\n    if (options.uri.includes(this.spark.config.credentials.oauth.tokenUrl)) {\n      return Promise.resolve(false);\n    }\n\n    if (options.uri.includes(this.spark.config.credentials.oauth.authorizeUrl)) {\n      return Promise.resolve(false);\n    }\n\n    if (options.uri.includes(this.spark.config.credentials.samlUrl)) {\n      return Promise.resolve(false);\n    }\n\n    if (options.service && this.spark.device.isService(options.service)) {\n      return Promise.resolve(true);\n    }\n\n    if (options.uri && this.spark.device.isServiceUrl(options.uri)) {\n      return Promise.resolve(true);\n    }\n\n    return Promise.resolve(false);\n  }\n\n  /**\n   * Always returns false\n   * @returns {boolean}\n   */\n  requiresClientCredentials() {\n    return false;\n  }\n}\n"]}