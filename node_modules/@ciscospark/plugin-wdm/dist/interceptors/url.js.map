{"version":3,"sources":["../../src/interceptors/url.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;AAEA,IAAM,UAAU,iBAAhB;;AAEA;;;AATA;;;;;IAYqB,c;;;;;;;;;;;;AASnB;;;;;8BAKU,O,EAAS;AACjB,UAAI,CAAC,QAAQ,GAAb,EAAkB;AAChB,aAAK,YAAL,CAAkB,OAAlB;AACA,aAAK,gBAAL,CAAsB,OAAtB;;AAEA,eAAO,KAAK,KAAL,CAAW,MAAX,CAAkB,aAAlB,CAAgC,QAAQ,OAAxC,EACJ,IADI,CACC,UAAC,GAAD,EAAS;AACb,cAAI,CAAC,GAAL,EAAU;AACR,mBAAO,kBAAQ,MAAR,CAAe,IAAI,KAAJ,OAAe,QAAQ,OAAvB,8BAAf,CAAP;AACD;;AAED;AACA,cAAI,QAAQ,QAAZ,EAAsB;AACpB,kBAAS,IAAI,OAAJ,CAAY,OAAZ,KAAT,SAAqC,QAAQ,QAAR,CAAiB,OAAjB,CAAyB,OAAzB,KAArC;AACD;;AAED,kBAAQ,GAAR,GAAc,GAAd;AACA,iBAAO,OAAP;AACD,SAbI,CAAP;AAcD;;AAED,aAAO,OAAP;AACD;;AAED;;;;;;;;iCAKa,O,EAAS;AACpB,UAAI,CAAC,QAAQ,GAAT,IAAgB,CAAC,QAAQ,OAA7B,EAAsC;AACpC,cAAM,IAAI,KAAJ,8CAAN;AACD;;AAED,UAAI,CAAC,QAAQ,QAAb,EAAuB;AACrB,cAAM,IAAI,KAAJ,sCAAN;AACD;AACF;;AAED;;;;;;;;;qCAMiB,O,EAAS;AACxB,UAAI,QAAQ,OAAZ,EAAqB;AACnB;AACD;;AAED,4BAAc,OAAd,EAAuB;AACrB,iBAAS,QAAQ,OAAR,IAAmB,QAAQ;AADf,OAAvB;;AAIA,oCAAuB,OAAvB;AACD;;;;AApED;;;6BAGgB;AACd;AACA,aAAO,IAAI,cAAJ,CAAmB,EAAC,OAAO,IAAR,EAAnB,CAAP;AACD;;;;;kBAPkB,c","file":"url.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {Interceptor} from '@ciscospark/http-core';\n\nconst pattern = /(?:^\\/)|(?:\\/$)/;\n\n/**\n * @class\n */\nexport default class UrlInterceptor extends Interceptor {\n  /**\n   * @returns {UrlInterceptor}\n   */\n  static create() {\n    /* eslint no-invalid-this: [0] */\n    return new UrlInterceptor({spark: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    if (!options.uri) {\n      this.checkOptions(options);\n      this.normalizeOptions(options);\n\n      return this.spark.device.getServiceUrl(options.service)\n        .then((uri) => {\n          if (!uri) {\n            return Promise.reject(new Error(`\\`${options.service}\\` is not a known service`));\n          }\n\n          // strip leading and trailing slashes before assembling the full uri\n          if (options.resource) {\n            uri = `${uri.replace(pattern, ``)}/${options.resource.replace(pattern, ``)}`;\n          }\n\n          options.uri = uri;\n          return options;\n        });\n    }\n\n    return options;\n  }\n\n  /**\n   * Verify that all required parameters have been specified.\n   * @param {Object} options\n   * @returns {Object}\n   */\n  checkOptions(options) {\n    if (!options.api && !options.service) {\n      throw new Error(`A \\`service\\` or \\`uri\\` parameter is required`);\n    }\n\n    if (!options.resource) {\n      throw new Error(`A \\`resource\\` parameter is required`);\n    }\n  }\n\n  /**\n   * accept api or service and rename to service\n   * @param {Object} options\n   * @private\n   * @returns {Object}\n   */\n  normalizeOptions(options) {\n    if (options.service) {\n      return;\n    }\n\n    Object.assign(options, {\n      service: options.service || options.api\n    });\n\n    Reflect.deleteProperty(options, `api`);\n  }\n}\n"]}