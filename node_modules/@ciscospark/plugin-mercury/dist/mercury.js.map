{"version":3,"sources":["../src/mercury.js"],"names":[],"mappings":"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","file":"mercury.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {SparkPlugin} from '@ciscospark/spark-core';\nimport util from 'util';\nimport {oneFlight} from '@ciscospark/common';\nimport {set} from 'lodash';\nimport S from 'string';\nimport backoff from 'backoff';\nimport Socket from './socket';\nimport {AuthorizationError} from './errors';\n\nconst normalReconnectReasons = [\n  `idle`,\n  `done (forced)`,\n  `pong not received`,\n  `pong mismatch`\n];\n\nconst Mercury = SparkPlugin.extend({\n  namespace: `Mercury`,\n\n  session: {\n    connected: {\n      default: false,\n      type: `boolean`\n    },\n    connecting: {\n      default: false,\n      type: `boolean`\n    },\n    socket: `object`\n  },\n\n  derived: {\n    listening: {\n      deps: [`connected`],\n      fn() {\n        return this.connected;\n      }\n    }\n  },\n\n  connect: oneFlight(`connect`, function connect() {\n    if (this.connected) {\n      this.logger.info(`mercury: already connected, will not connect again`);\n      return Promise.resolve();\n    }\n\n    this.connecting = true;\n    return Promise.resolve(this.spark.device.registered || this.spark.device.register())\n      .then(() => {\n        this.logger.info(`mercury: connecting`);\n\n        return this._connectWithBackoff();\n      });\n  }),\n\n  disconnect: oneFlight(`disconnect`, function disconnect() {\n    return new Promise((resolve) => {\n      if (this.backoffCall) {\n        this.logger.info(`mercury: aborting connection`);\n        this.backoffCall.abort();\n      }\n\n      if (this.socket) {\n        this.socket.removeAllListeners(`message`);\n        this.once(`offline`, resolve);\n        this.socket.close();\n        return;\n      }\n\n      resolve();\n    });\n  }),\n\n  listen: util.deprecate(function listen() {\n    /* eslint no-invalid-this: [0] */\n    return this.connect();\n  }, `Mercury#listen(): Use Mercury#connect() instead`),\n\n  stopListening: util.deprecate(function stopListening() {\n    /* eslint no-invalid-this: [0] */\n    return this.disconnect();\n  }, `Mercury#stopListening(): Use Mercury#disconnect() instead`),\n\n  _applyOverrides(event) {\n    if (!event.headers) {\n      return;\n    }\n    const headerKeys = Object.keys(event.headers);\n    headerKeys.forEach((keyPath) => {\n      set(event, keyPath, event.headers[keyPath]);\n    });\n  },\n\n  _attemptConnection(callback) {\n    const socket = new Socket();\n    socket.on(`close`, (...args) => this._onclose(...args));\n    socket.on(`message`, (...args) => this._onmessage(...args));\n    socket.on(`sequence-mismatch`, (...args) => this._emit(`sequence-mismatch`, ...args));\n\n    this.spark.credentials.getAuthorization()\n      .then((authorization) => socket.open(this.spark.device.webSocketUrl, {\n        forceCloseDelay: this.config.forceCloseDelay,\n        pingInterval: this.config.pingInterval,\n        pongTimeout: this.config.pongTimeout,\n        token: authorization,\n        trackingId: this.spark.trackingId,\n        logger: this.logger\n      }))\n      .then(() => {\n        this.socket = socket;\n        callback();\n      })\n      .catch((reason) => {\n        // Suppress connection errors that appear to be network related. This\n        // may end up suppressing metrics during outages, but we might not care\n        // (especially since many of our outages happen in a way that client\n        // metrics can't be trusted).\n        if (reason.code !== 1006 && this.backoffCall.getNumRetries() > 0) {\n          this._emit(`connection_failed`, reason, {retries: this.backoffCall.getNumRetries()});\n        }\n        this.logger.info(`mercury: connection attempt failed`, reason);\n        if (reason instanceof AuthorizationError) {\n          this.logger.info(`mercury: received authorization error, reauthorizing`);\n          return this.spark.refresh()\n            .then(() => callback(reason));\n        }\n\n        return callback(reason);\n      })\n      .catch((reason) => {\n        this.logger.error(`mercury: failed to handle connection failured`, reason);\n        callback(reason);\n      });\n  },\n\n  _connectWithBackoff() {\n    return new Promise((resolve, reject) => {\n      let call;\n      const onComplete = (err) => {\n        this.connecting = false;\n\n        this.backoffCall = undefined;\n        if (err) {\n          this.logger.info(`mercury: failed to connect after ${call.getNumRetries()} retries; log statement about next retry was inaccurate`);\n          return reject(err);\n        }\n        this.connected = true;\n        this._emit(`online`);\n        return resolve();\n      };\n\n      // eslint-disable-next-line prefer-reflect\n      call = backoff.call((callback) => {\n        this.logger.info(`mercury: executing connection attempt ${call.getNumRetries()}`);\n        this._attemptConnection(callback);\n      }, onComplete);\n\n      call.setStrategy(new backoff.ExponentialStrategy({\n        initialDelay: this.config.backoffTimeReset,\n        maxDelay: this.config.backoffTimeMax\n      }));\n\n      if (this.config.maxRetries) {\n        call.failAfter(this.config.maxRetries);\n      }\n\n      call.on(`abort`, () => {\n        this.logger.info(`mercury: connection aborted`);\n        reject();\n      });\n\n      call.on(`callback`, (err) => {\n        if (err) {\n          const number = call.getNumRetries();\n          const delay = call.strategy_.nextBackoffDelay_;\n\n          this.logger.info(`mercury: failed to connect; attempting retry ${number + 1} in ${delay} ms`);\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV === `development`) {\n            this.logger.debug(`mercury: `, err, err.stack);\n          }\n          return;\n        }\n        this.logger.info(`mercury: connected`);\n      });\n\n      call.start();\n\n      this.backoffCall = call;\n    });\n  },\n\n  _emit(...args) {\n    try {\n      this.trigger(...args);\n    }\n    catch (error) {\n      this.logger.error(`mercury: error occurred in event handler`, error);\n    }\n  },\n\n  _getEventHandlers(eventType) {\n    const [namespace, name] = eventType.split(`.`);\n    const handlers = [];\n\n    if (!this.spark[namespace]) {\n      return handlers;\n    }\n\n    const handlerName = S(`process_${name}_event`).camelize().s;\n    if (this.spark[namespace][handlerName]) {\n      handlers.push({\n        name: handlerName,\n        namespace\n      });\n    }\n    return handlers;\n  },\n\n  _onclose(event) {\n    // I don't see any way to avoid the complexity or statement count in here.\n    /* eslint complexity: [0] */\n\n    try {\n      const reason = event.reason && event.reason.toLowerCase();\n      this.socket.removeAllListeners();\n      this.unset(`socket`);\n      this.connected = false;\n      this._emit(`offline`, event);\n\n      switch (event.code) {\n      case 1003:\n        // metric: disconnect\n        this.logger.info(`mercury: Mercury service rejected last message; will not reconnect: ${event.reason}`);\n        this._emit(`offline.permanent`, event);\n        break;\n      case 4000:\n        // metric: disconnect\n        this.logger.info(`mercury: socket replaced; will not reconnect`);\n        this._emit(`offline.replaced`, event);\n        break;\n      case 1001:\n      case 1005:\n      case 1006:\n      case 1011:\n        this.logger.info(`mercury: socket disconnected; reconnecting`);\n        this._emit(`offline.transient`, event);\n        this._reconnect();\n        // metric: disconnect\n        // if (code == 1011 && rason !== ping error) metric: unexpected disconnect\n        break;\n      case 1000:\n        if (normalReconnectReasons.includes(reason)) {\n          this.logger.info(`mercury: socket disconnected; reconnecting`);\n          this._emit(`offline.transient`, event);\n          this._reconnect();\n          // metric: disconnect\n          // if (reason === done forced) metric: force closure\n        }\n        else {\n          this.logger.info(`mercury: socket disconnected; will not reconnect`);\n          this._emit(`offline.permanent`, event);\n        }\n        break;\n      default:\n        this.logger.info(`mercury: socket disconnected unexpectedly; will not reconnect`);\n        // unexpected disconnect\n        this._emit(`offline.permanent`, event);\n      }\n    }\n    catch (error) {\n      this.logger.error(`mercury: error occurred in close handler`, error);\n    }\n  },\n\n  _onmessage(event) {\n    const envelope = event.data;\n    if (process.env.ENABLE_MERCURY_LOGGING) {\n      this.logger.debug(`mercury: message envelope: `, envelope);\n    }\n\n    const data = envelope.data;\n    this._applyOverrides(data);\n    return this._getEventHandlers(data.eventType)\n      .reduce((promise, handler) => promise.then(() => {\n        const {namespace, name} = handler;\n        return new Promise((resolve) => resolve(this.spark[namespace][name](data)))\n          .catch((reason) => this.logger.error(`mercury: error occurred in autowired event handler for ${data.eventType}`, reason));\n      }), Promise.resolve())\n      .then(() => {\n        this._emit(`event`, event.data);\n        this._emit(`event:${data.eventType}`, envelope);\n      })\n      .catch((reason) => {\n        this.logger.error(`mercury: error occurred processing socket message`, reason);\n      });\n  },\n\n  _reconnect() {\n    this.logger.info(`mercury: reconnecting`);\n    return this.connect();\n  }\n});\n\nexport default Mercury;\n"]}