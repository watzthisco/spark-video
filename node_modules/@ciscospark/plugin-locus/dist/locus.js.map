{"version":3,"sources":["../src/locus.js"],"names":[],"mappings":"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","file":"locus.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {SparkPlugin, SparkHttpError} from '@ciscospark/spark-core';\nimport {difference, first, last, memoize} from 'lodash';\n\nexport const USE_INCOMING = `USE_INCOMING`;\nexport const USE_CURRENT = `USE_CURRENT`;\nexport const EQUAL = `EQUAL`;\nexport const FETCH = `FETCH`;\n\nconst Locus = SparkPlugin.extend({\n  namespace: `Locus`,\n\n  /**\n   * Alert the specified locus that the local user has been notified of the\n   * locus's active state\n   * @param {Types~Locus} locus\n   * @returns {Promise}\n   */\n  alert(locus) {\n    return this.request({\n      method: `PUT`,\n      uri: `${locus.url}/participant/alert`,\n      body: {\n        deviceUrl: this.spark.device.url\n      }\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Calls the specified invitee and offers the specified media via\n   * options.localSdp\n   * @param {string} invitee\n   * @param {Object} options\n   * @param {Object} options.localSdp\n   * @returns {Promise<Types~Locus>}\n   */\n  create(invitee, options) {\n    options = options || {};\n\n    return this.request({\n      method: `POST`,\n      service: `locus`,\n      resource: `loci/call`,\n      body: {\n        deviceUrl: this.spark.device.url,\n        invitee: {\n          invitee\n        },\n        localMedias: [{\n          localSdp: JSON.stringify({\n            type: `SDP`,\n            sdp: options.localSdp\n          })\n        }]\n      }\n    })\n      // res.body.mediaConnections is deprecated so just return the locus\n      .then((res) => res.body.locus);\n  },\n\n  /**\n   * Lists active loci\n   * @returns {Promise<Array<Types~Locus>>}\n   */\n  list() {\n    return this.request({\n      method: `GET`,\n      service: `locus`,\n      resource: `loci`\n    })\n      .then((res) => res.body.loci);\n  },\n\n  /**\n   * Retrieves a single Locus\n   * @param {Types~Locus} locus\n   * @returns {Types~Locus}\n   */\n  get(locus) {\n    return this.request({\n      method: `GET`,\n      uri: `${locus.url}`\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Join the specified Locus and offer to send it media\n   * @param {Types~Locus} locus\n   * @param {Object} options\n   * @param {Object} options.localSdp\n   * @returns {Types~Locus}\n   */\n  join(locus, options) {\n    options = options || {};\n\n    // TODO should options.localSdp be an array?\n    return this.request({\n      method: `POST`,\n      uri: `${locus.url}/participant`,\n      body: {\n        deviceUrl: this.spark.device.url,\n        localMedias: [{\n          localSdp: JSON.stringify({\n            type: `SDP`,\n            sdp: options.localSdp\n          })\n        }]\n      }\n    })\n      // The mediaConnections object is deprecated, so just return the locus\n      .then((res) => res.body.locus);\n  },\n\n\n  /**\n   * Leave the specified Locus\n   * @param {Types~Locus} locus\n   * @returns {Promise<Types~Locus>}\n   */\n  leave(locus) {\n    return this.request({\n      method: `PUT`,\n      uri: `${locus.self.url}/leave`,\n      body: {\n        deviceUrl: this.spark.device.url\n      }\n    })\n      .then((res) => res.body.locus)\n      .catch((reason) => {\n        if (reason instanceof SparkHttpError.Conflict) {\n          return this.get(locus);\n        }\n        return Promise.reject(reason);\n      });\n  },\n\n  /**\n   * Decline to join the specified Locus\n   * @param {Types~Locus} locus\n   * @returns {Promise<Types~Locus>}\n   */\n  decline(locus) {\n    return this.request({\n      method: `PUT`,\n      // TODO can this be locus.self.url? or does self only work once we've\n      // joined?\n      uri: `${locus.url}/participant/decline`,\n      body: {\n        deviceUrl: this.spark.device.url\n      }\n    })\n      .then((res) => res.body)\n      .catch((reason) => {\n        if (reason instanceof SparkHttpError.Conflict) {\n          return this.get(locus);\n        }\n        return Promise.reject(reason);\n      });\n  },\n\n  /**\n   * Send a new sdp to Linus via the Locus API to update media state (e.g. to\n   * start or stop sending audio or video)\n   * @param {Types~Locus} locus\n   * @param {Object} options\n   * @param {Object} options.localSdp\n   * @param {Object} options.mediaId\n   * @returns {Promise<Types~Locus>}\n   */\n  updateMedia(locus, options) {\n    return this.request({\n      method: `PUT`,\n      uri: `${locus.self.url}/media`,\n      body: {\n        deviceUrl: this.spark.device.url,\n        localMedias: [{\n          type: `SDP`,\n          localSdp: JSON.stringify({\n            type: `SDP`,\n            sdp: options.localSdp\n          }),\n          mediaId: options.mediaId\n        }]\n      }\n    })\n      .then((res) => res.body.locus);\n  },\n\n  /**\n   * Compares two loci to determine which one contains the most recent state\n   * @param {Types~Locus} current\n   * @param {Types~Locus} incoming\n   * @returns {string} one of USE_INCOMING, USE_CURRENT, EQUAL, or FETCH\n   */\n  compare(current, incoming) {\n    if (!current) {\n      throw new Error(`\\`current\\` is required`);\n    }\n\n    if (!incoming) {\n      throw new Error(`\\`incoming\\` is required`);\n    }\n    // complexity here is unavoidable\n    /* eslint complexity: [0] */\n    /* eslint max-statements: [0] */\n\n    // must pick one of arrow-body-style or no-confusing-arrow to disable\n    /* eslint arrow-body-style: [0] */\n\n    // after running the #compare() test suite in a loop, there doesn't seem to\n    // be any appreciable difference when used with or without memoize; since\n    // real locus sequences are likely to contain more sequence numbers than\n    // those in the test suite, I have to assume memoize can only help and the\n    // overhead of memoizing these methods is not a problem.\n\n    const getEntriesFirstValue = memoize((locus) => {\n      return locus.sequence.entries.length === 0 ? 0 : first(locus.sequence.entries);\n    });\n    const getEntriesLastValue = memoize((locus) => {\n      return locus.sequence.entries.length === 0 ? 0 : last(locus.sequence.entries);\n    });\n    const getCompareFirstValue = memoize((locus) => {\n      return locus.sequence.rangeStart || getEntriesFirstValue(locus);\n    });\n    const getCompareLastValue = memoize((locus) => {\n      return getEntriesLastValue(locus) || locus.sequence.rangeEnd;\n    });\n    /**\n     * @param {number} entry\n     * @param {Types~Locus} locus\n     * @private\n     * @returns {Boolean}\n     */\n    function inRange(entry, locus) {\n      return entry >= locus.sequence.rangeStart && entry <= locus.sequence.rangeEnd;\n    }\n\n    if (getCompareLastValue(current) < getCompareFirstValue(incoming)) {\n      return USE_INCOMING;\n    }\n\n    if (getCompareFirstValue(current) > getCompareLastValue(incoming)) {\n      return USE_CURRENT;\n    }\n\n    const currentOnlyEntries = difference(current.sequence.entries, incoming.sequence.entries);\n    const incomingOnlyEntries = difference(incoming.sequence.entries, current.sequence.entries);\n    const currentOnly = [];\n    const incomingOnly = [];\n\n    for (const i of currentOnlyEntries) {\n      if (!inRange(i, incoming)) {\n        currentOnly.push(i);\n      }\n    }\n    for (const i of incomingOnlyEntries) {\n      if (!inRange(i, current)) {\n        incomingOnly.push(i);\n      }\n    }\n\n    if (!currentOnly.length && !incomingOnly.length) {\n      if (current.sequence.rangeEnd > incoming.sequence.rangeEnd) {\n        return USE_CURRENT;\n      }\n      if (current.sequence.rangeEnd < incoming.sequence.rangeEnd) {\n        return USE_INCOMING;\n      }\n      if (current.sequence.rangeStart < incoming.sequence.rangeStart) {\n        return USE_CURRENT;\n      }\n      if (current.sequence.rangeStart > incoming.sequence.rangeStart) {\n        return USE_INCOMING;\n      }\n      return EQUAL;\n    }\n\n    if (currentOnly.length && !incomingOnly.length) {\n      return USE_CURRENT;\n    }\n\n    if (!currentOnly.length && incomingOnly.length) {\n      return USE_INCOMING;\n    }\n\n    for (const i of currentOnly) {\n      if (getCompareFirstValue(incoming) < i && i < getCompareLastValue(incoming)) {\n        return FETCH;\n      }\n    }\n\n    for (const i of incomingOnly) {\n      if (getCompareFirstValue(current) < i && i < getCompareLastValue(current)) {\n        return FETCH;\n      }\n    }\n\n    if (currentOnly[0] > incomingOnly[0]) {\n      return USE_CURRENT;\n    }\n\n    return USE_INCOMING;\n  },\n\n  getCallHistory(options) {\n    options = options || {};\n    const from = (new Date(options.from || Date.now())).toISOString();\n\n    return this.request({\n      method: `GET`,\n      service: `janus`,\n      resource: `history/userSessions`,\n      qs: {from}\n    })\n      .then((res) => res.body);\n  }\n\n});\n\nexport default Locus;\n"]}