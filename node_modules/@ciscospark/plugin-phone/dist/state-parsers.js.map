{"version":3,"sources":["../src/state-parsers.js"],"names":[],"mappings":";;;;;;;;;;QAcgB,kB,GAAA,kB;QAUA,S,GAAA,S;QAaA,Q,GAAA,Q;QAWA,M,GAAA,M;QAUA,M,GAAA,M;QAWA,kB,GAAA,kB;QAWA,c,GAAA,c;QAkBA,mB,GAAA,mB;QAUA,iB,GAAA,iB;QAUA,kB,GAAA,kB;QAUA,gB,GAAA,gB;QAUA,gB,GAAA,gB;QAWA,U,GAAA,U;;;;AA7IhB;;;;;;AAMO,SAAS,kBAAT,CAA4B,KAA5B,EAAmC;AACxC,SAAO,sBAAO,MAAM,YAAb,EAA2B,EAAC,eAAD,EAA3B,CAAP;AACD;;AAED;;;;;;AAlBA;;;;;;AAwBO,SAAS,SAAT,CAAmB,KAAnB,EAA0B;AAC/B,MAAI,CAAC,KAAD,IAAU,CAAC,MAAM,IAArB,EAA2B;AACzB;AACD;AACD,SAAO,MAAM,IAAN,CAAW,SAAX,eAAP;AACD;;AAED;;;;;;AAMO,SAAS,QAAT,CAAkB,KAAlB,EAAyB;AAC9B,SAAO,MAAM,SAAN,CAAgB,KAAhB,aAAP;AACD;;AAED;;;;;;;AAOO,SAAS,MAAT,CAAgB,KAAhB,EAAuB;AAC5B,SAAO,MAAM,YAAN,CAAmB,MAAnB,CAA0B,UAAC,WAAD;AAAA,WAAiB,YAAY,IAAZ,WAAjB;AAAA,GAA1B,EAAwE,MAAxE,KAAmF,CAA1F;AACD;;AAED;;;;;;AAMO,SAAS,MAAT,CAAgB,KAAhB,EAAuB;AAC5B,SAAO,QAAQ,MAAM,IAAN,IAAc,oBAAoB,MAAM,IAA1B,CAAtB,CAAP;AACD;;AAED;;;;;;;AAOO,SAAS,kBAAT,CAA4B,KAA5B,EAAmC,KAAnC,EAA0C;AAC/C,SAAO,OAAO,KAAP,KAAiB,MAAM,MAAN,CAAa,GAAb,KAAqB,MAAM,IAAN,CAAW,SAAxD;AACD;;AAED;;;;;;;AAOO,SAAS,cAAT,CAAwB,SAAxB,EAAmC,WAAnC,EAAgD;AACrD,MAAI,CAAC,WAAL,EAAkB;AAChB;AACD;;AAED,MAAI,CAAC,YAAY,MAAjB,EAAyB;AACvB;AACD;;AAED,SAAO,CAAC,YAAY,MAAZ,CAAsB,SAAtB,0BAAD,EAAyD,WAAzD,EAAP;AACD;;AAED;;;;;;AAMO,SAAS,mBAAT,CAA6B,WAA7B,EAA0C;AAC/C,SAAO,YAAY,KAAZ,aAAP;AACD;;AAED;;;;;;AAMO,SAAS,iBAAT,CAA2B,KAA3B,EAAkC;AACvC,SAAO,mBAAmB,KAAnB,EAA0B,CAA1B,CAAP;AACD;;AAED;;;;;;AAMO,SAAS,kBAAT,CAA4B,KAA5B,EAAmC;AACxC,SAAO,MAAM,YAAN,CAAmB,MAAnB,CAA0B,UAAC,WAAD;AAAA,WAAiB,YAAY,IAAZ,eAA+B,YAAY,GAAZ,KAAoB,MAAM,IAAN,CAAW,GAA/E;AAAA,GAA1B,CAAP;AACD;;AAED;;;;;;AAMO,SAAS,gBAAT,CAA0B,WAA1B,EAAuC;AAC5C,SAAO,oBAAoB,WAApB,KAAoC,CAAC,YAAY,MAAZ,CAAmB,WAAnB,CAA+B,QAA/B,QAA5C;AACD;;AAED;;;;;;AAMO,SAAS,gBAAT,CAA0B,WAA1B,EAAuC;AAC5C,SAAO,oBAAoB,WAApB,KAAoC,CAAC,YAAY,MAAZ,CAAmB,WAAnB,CAA+B,QAA/B,QAA5C;AACD;;AAED;;;;;;;AAOO,SAAS,UAAT,CAAoB,KAApB,EAA2B,KAA3B,EAAkC;AACvC;AACA;AACA,SAAO,MAAM,IAAN,CAAW,SAAX,mCAAuD,OAAO,MAAM,IAAN,CAAW,KAAlB,CAAvD,IAAmF,CAAC,mBAAmB,MAAM,IAAN,CAAW,KAA9B,EAAqC,MAAM,MAAN,CAAa,GAAlD,CAA3F;AACD","file":"state-parsers.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {filter} from 'lodash';\n\n/**\n * Finds the Locus's active participants\n * @param {Types~Locus} locus\n * @private\n * @returns {Array<Types~LocusParticipant>}\n */\nexport function activeParticipants(locus) {\n  return filter(locus.participants, {state: `JOINED`});\n}\n\n/**\n * Indicates if the locus was activated form this device\n * @param {Types~Locus} locus\n * @private\n * @returns {string} unknown|in|out\n */\nexport function direction(locus) {\n  if (!locus || !locus.self) {\n    return `unknown`;\n  }\n  return locus.self.isCreator ? `out` : `in`;\n}\n\n/**\n * Indicates of the specifed locus is active\n * @param {Types~Locus} locus\n * @private\n * @returns {Boolean}\n */\nexport function isActive(locus) {\n  return locus.fullState.state === `ACTIVE`;\n}\n\n/**\n * Indicates if the specified locus represents a call (in other words, has\n * exactly two participants)\n * @param {Types~Locus} locus\n * @private\n * @returns {Boolean}\n */\nexport function isCall(locus) {\n  return locus.participants.filter((participant) => participant.type === `USER`).length === 2;\n}\n\n/**\n * Indicates if the current user has joined the Locus\n * @param {Types~Locus} locus\n * @private\n * @returns {Boolean}\n */\nexport function joined(locus) {\n  return Boolean(locus.self && participantIsJoined(locus.self));\n}\n\n/**\n * Indicates if this device has joined the locus\n * @param {ProxySpark} spark\n * @param {Types~Locus} locus\n * @private\n * @returns {Boolean}\n */\nexport function joinedOnThisDevice(spark, locus) {\n  return joined(locus) && spark.device.url === locus.self.deviceUrl;\n}\n\n/**\n * Indicates the direction of the specified media type for the specified\n * participant\n * @param {string} mediaType\n * @param {Types~LocusParticipant} participant\n * @returns {string} One of `sendonly`, `recvonly`, `sendrecv`, or `inactive`\n */\nexport function mediaDirection(mediaType, participant) {\n  if (!participant) {\n    return `inactive`;\n  }\n\n  if (!participant.status) {\n    return `inactive`;\n  }\n\n  return (participant.status[`${mediaType}Status`] || `inactive`).toLowerCase();\n}\n\n/**\n * Indicates if the specified participant has joined the Locus\n * @param {Types~LocusParticipant} participant\n * @private\n * @returns {Boolean}\n */\nexport function participantIsJoined(participant) {\n  return participant.state === `JOINED`;\n}\n\n/**\n * Finds the party in the call that is not the current user\n * @param {Types~Locus} locus\n * @private\n * @returns {Types~LocusParticipant}\n */\nexport function remoteParticipant(locus) {\n  return remoteParticipants(locus)[0];\n}\n\n/**\n * Finds all participants of the Locus that are not the current user\n * @param {Types~Locus} locus\n * @private\n * @returns {Types~LocusParticipant}\n */\nexport function remoteParticipants(locus) {\n  return locus.participants.filter((participant) => participant.type === `USER` && participant.url !== locus.self.url);\n}\n\n/**\n * Indicates if the remote party is sending audio\n * @param {Types~LocusParticipant} participant\n * @private\n * @returns {Boolean}\n */\nexport function remoteAudioMuted(participant) {\n  return participantIsJoined(participant) && !participant.status.audioStatus.includes(`SEND`);\n}\n\n/**\n * Indicates if the remote party is sending video\n * @param {Types~LocusParticipant} participant\n * @private\n * @returns {Boolean}\n */\nexport function remoteVideoMuted(participant) {\n  return participantIsJoined(participant) && !participant.status.videoStatus.includes(`SEND`);\n}\n\n/**\n * Indicates if the `call:incoming` event should be fired for the specified Locus\n * @param {Types~MercuryEvent} event Event which delivered the Locus\n * @param {ProxySpark} spark\n * @private\n * @returns {Boolean}\n */\nexport function shouldRing(event, spark) {\n  // FIXME this is not correct, but it's the best i've got until locus gets back\n  // to me\n  return event.data.eventType === `locus.participant_joined` && isCall(event.data.locus) && !joinedOnThisDevice(event.data.locus, spark.device.url);\n}\n"]}