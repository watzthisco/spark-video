{"version":3,"sources":["../src/phone.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAMA;;AACA;;AAEA;;;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;AAaA;;;;AAIA,IAAM,QAAQ,uBAAY,MAAZ,CAAmB;AAC/B,WAAS;AACP;;;;;;;AAOA,eAAW;AACT,YAAM,4BADG;AAET;AACA,aAAO,KAHE;AAIT,QAJS,gBAIJ;AACH,eAAO,QAAQ,KAAK,KAAL,CAAW,OAAX,CAAmB,SAA3B,CAAP;AACD;AANQ,KARJ;AAgBP;;;;;;;;AAQA,gBAAY;AACV,YAAM,kCADI;AAKV;AACA,aAAO,KANG;AAOV,QAPU,gBAOL;AACH,eAAO,QAAQ,KAAK,KAAL,CAAW,MAAX,CAAkB,GAAlB,IAAyB,KAAK,SAAtC,CAAP;AACD;AATS;AAxBL,GADsB;;AAsC/B,oBAtC+B;;AAwC/B;;;;;;;;;AASA,UAjD+B,sBAiDpB;AAAA;;AACT,WAAO,KAAK,KAAL,CAAW,OAAX,CAAmB,OAAnB,GACJ,IADI,CACC;AAAA,aAAM,MAAK,KAAL,CAAW,KAAX,CAAiB,IAAjB,EAAN;AAAA,KADD,EAEJ,IAFI,CAEC,UAAC,IAAD,EAAU;AACd,WAAK,OAAL,CAAa,UAAC,KAAD,EAAW;AACtB,cAAK,OAAL,kBAA8B,eAAK,IAAL,CAAU;AACtC;AADsC,SAAV,EAE3B;AACD,kBAAQ,MAAK;AADZ,SAF2B,CAA9B;AAKD,OAND;AAOD,KAVI,CAAP;AAWD,GA7D8B;;;AA+D/B;;;;;;;;AAQA,YAvE+B,wBAuElB;AACX;AACA;AACA,WAAO,KAAK,KAAL,CAAW,OAAX,CAAmB,UAAnB,EAAP;AACD,GA3E8B;;;AA6E/B;;;;;;;;;;;AAWA,wBAxF+B,kCAwFR,OAxFQ,EAwFC;AAC9B;AACA;AACA,cAAU,WAAW,EAArB;AACA,QAAM,cAAc,QAAQ,WAAR,IAAuB,OAA3C;AACA,4BAAS,WAAT,EAAsB;AACpB,aAAO,IADa;AAEpB,aAAO;AAFa,KAAtB;;AAKA,WAAO,0BAAa,WAAb,CAAP;AACD,GAnG8B;;;AAqG/B;;;;;;;;;AASA,YA9G+B,wBA8GX;AAAA;;AAAA,sCAAN,IAAM;AAAN,UAAM;AAAA;;AAClB,yBAAc,uBAAY,SAAZ,CAAsB,UAApC,EAAgD,IAAhD,EAAsD,IAAtD;;AAEA,2BAAU,OAAV,CAAkB,UAAC,GAAD,EAAS;AACzB,aAAK,QAAL,CAAc,OAAK,KAAL,CAAW,OAAzB,aAA2C,GAA3C,EAAkD,UAAC,KAAD;AAAA,eAAW,OAAK,aAAL,CAAmB,KAAnB,CAAX;AAAA,OAAlD;AACD,KAFD;AAGD,GApH8B;;;AAsH/B;;;;;;;;;AASA,eA/H+B,yBA+HjB,KA/HiB,EA+HV;AACnB,QAAI,8BAAW,KAAX,EAAkB,KAAK,KAAvB,CAAJ,EAAmC;AACjC,WAAK,OAAL,kBAA8B,eAAK,IAAL,CAAU;AACtC,eAAO,MAAM,IAAN,CAAW;AADoB,OAAV,EAE3B;AACD,gBAAQ,KAAK;AADZ,OAF2B,CAA9B;AAKD;AACF,GAvI8B;;;AAyI/B;;;;;;;;;;;;AAYA,MArJ+B,gBAqJ1B,UArJ0B,EAqJd,OArJc,EAqJL;AACxB;AACA,QAAM,OAAO,eAAK,IAAL,CAAU,EAAV,EAAc,EAAC,QAAQ,KAAK,KAAd,EAAd,CAAb;;AAEA,SAAK,IAAL,CAAU,UAAV,EAAsB,OAAtB;AACA,WAAO,IAAP;AACD;AA3J8B,CAAnB,CAAd,CA9BA;;;;;;kBA4Le,K","file":"phone.js","sourcesContent":["/**!\n *\n * Copyright (c) 2016 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {SparkPlugin} from '@ciscospark/spark-core';\nimport {eventKeys} from '@ciscospark/plugin-locus';\nimport {defaults} from 'lodash';\nimport Call from './call';\nimport {shouldRing} from './state-parsers';\nimport {getUserMedia} from './webrtc';\n\n/**\n * Incoming Call Event\n *\n * Emitted when a call begins and when {@link Phone#register} is invoked and\n * there are active calls.\n *\n * @event call:incoming\n * @instance\n * @memberof Phone\n * @type {Object}\n * @property {Call} call The incoming call\n */\n\n/**\n * @class\n * @extends SparkPlugin\n */\nconst Phone = SparkPlugin.extend({\n  derived: {\n    /**\n     * connected Indicates whether or not the WebSocket is connected\n     * @instance\n     * @memberof Phone\n     * @member {Boolean}\n     * @readonly\n     */\n    connected: {\n      deps: [`parent.mercury.connected`],\n      // FIXME this prop must be cacheable so it can emit change events\n      cache: false,\n      fn() {\n        return Boolean(this.spark.mercury.connected);\n      }\n    },\n    /**\n     * indicates whether or not the client is registered with the Cisco Spark\n     * cloud\n     * @instance\n     * @memberof Phone\n     * @member {Boolean}\n     * @readonly\n     */\n    registered: {\n      deps: [\n        `parent.device.url`,\n        `connected`\n      ],\n      // FIXME this prop must be cacheable so it can emit change events\n      cache: false,\n      fn() {\n        return Boolean(this.spark.device.url && this.connected);\n      }\n    }\n  },\n\n  namespace: `phone`,\n\n  /**\n   * Registers the client with the Cisco Spark cloud and starts listening for\n   * WebSocket events.\n   *\n   * Subsequent calls refresh the device registration.\n   * @instance\n   * @memberof Phone\n   * @returns {Promise}\n   */\n  register() {\n    return this.spark.mercury.connect()\n      .then(() => this.spark.locus.list())\n      .then((loci) => {\n        loci.forEach((locus) => {\n          this.trigger(`call:incoming`, Call.make({\n            locus\n          }, {\n            parent: this.spark\n          }));\n        });\n      });\n  },\n\n  /**\n   * Disconnects from WebSocket and unregisters from the Cisco Spark cloud.\n   *\n   * Subsequent calls will be a noop.\n   * @instance\n   * @memberof Phone\n   * @returns {Promise}\n   */\n  deregister() {\n    // TODO figure out how to hangup all calls (or possibly just disconnect all\n    // streams)\n    return this.spark.mercury.disconnect();\n  },\n\n  /**\n   * Create a MediaStream to be used for video preview.\n   *\n   * Note: You must explicitly pass the resultant stream to {@link Call#answer()}\n   * or {@link Phone#dial()}\n   * @instance\n   * @memberof Phone\n   * @param {Object|MediaStreamConstraints} options\n   * @param {MediaStreamConstraints} options.constraints\n   * @returns {Promise<MediaStream>}\n   */\n  createLocalMediaStream(options) {\n    // TODO need to figure out a way to manage the stream internally. currently,\n    // misuse makes it really easy to lock the camera in the on state.\n    options = options || {};\n    const constraints = options.constraints || options;\n    defaults(constraints, {\n      audio: true,\n      video: true\n    });\n\n    return getUserMedia(constraints);\n  },\n\n  /**\n   * Initializer\n   * @instance\n   * @memberof Phone\n   * @param {Object} attrs\n   * @param {Object} options\n   * @private\n   * @returns {undefined}\n   */\n  initialize(...args) {\n    Reflect.apply(SparkPlugin.prototype.initialize, this, args);\n\n    eventKeys.forEach((key) => {\n      this.listenTo(this.spark.mercury, `event:${key}`, (event) => this._onLocusEvent(event));\n    });\n  },\n\n  /**\n   * Determines if the {@link call:incoming} event should be emitted for the\n   * specifed {@link Types~MercuryEvent}\n   * @emits call:incoming\n   * @instance\n   * @memberof Phone\n   * @param {Types~MercuryEvent} event\n   * @returns {undefined}\n   */\n  _onLocusEvent(event) {\n    if (shouldRing(event, this.spark)) {\n      this.trigger(`call:incoming`, Call.make({\n        locus: event.data.locus\n      }, {\n        parent: this.spark\n      }));\n    }\n  },\n\n  /**\n   * Place a call to the specified dialString. A dial string may be an email\n   * address or sip uri.\n   * @instance\n   * @memberof Phone\n   * @param {string} dialString\n   * @param {Object} options\n   * @param {MediaStreamConstraints} options.constraints\n   * @param {MediaStream} options.localMediaStream if no stream is specified, a\n   * new one will be created based on options.constraints\n   * @returns {Call}\n   */\n  dial(dialString, options) {\n    // TODO call register if it has not been called.\n    const call = Call.make({}, {parent: this.spark});\n\n    call.dial(dialString, options);\n    return call;\n  }\n});\n\nexport default Phone;\n"]}