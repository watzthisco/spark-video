{"version":3,"sources":["../src/webrtc.js"],"names":[],"mappings":"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","file":"webrtc.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\n/* eslint max-nested-callbacks: [0] */\n\nimport 'webrtc-adapter';\nimport transform from 'sdp-transform';\nimport {curry, defaults, find} from 'lodash';\nimport {tap} from '@ciscospark/common';\nimport {\n  addToMappedWeakMappedSet,\n  getMappedWeakMappedSet\n} from './map-utils';\n\nconst tracksByKindByStream = new Map();\nconst storeMediaTrackByKindByStream = addToMappedWeakMappedSet(tracksByKindByStream);\nconst getMediaTracksByKindByStream = getMappedWeakMappedSet(tracksByKindByStream);\nconst getVideoTracksByStream = getMediaTracksByKindByStream(`video`);\nconst getAudioTracksByStream = getMediaTracksByKindByStream(`audio`);\n\nconst startSendingMedia = curry((kind, pc) => {\n  let foundKind = false;\n  pc.getLocalStreams().forEach((stream) => {\n    // Find all the tracks we've removed from the stream/pc so we can readd them\n    const tracks = getMediaTracksByKindByStream(kind, stream);\n    tracks.forEach((track) => {\n      foundKind = foundKind || true;\n      track.enabled = true;\n      // Because adapter.js doesn't actually hide all the cross browser\n      // inconsistencies\n      if (pc.addTrack) {\n        pc.addTrack(track, stream);\n      }\n      else {\n        stream.addTrack(track);\n      }\n    });\n    tracks.delete(stream);\n  });\n\n  // If we didn't find any tracks for this stream/pc, we need to get new media\n  if (!foundKind) {\n    const constraints = {\n      audio: kind === `audio`,\n      video: kind === `video`\n    };\n\n    return getUserMedia(constraints)\n      .then((stream) => addStream(pc, stream));\n  }\n\n  return Promise.resolve();\n});\n\nconst stopSendingMedia = curry((kind, pc) => {\n  pc.getLocalStreams().forEach((stream) => {\n    stream.getTracks().forEach((track) => {\n      if (track.kind === kind) {\n        track.enabled = false;\n        // Store the tracks so we can add them back later (should the user want\n        // to mute/unmute)\n        storeMediaTrackByKindByStream(kind, stream, track);\n        if (pc.removeTrack) {\n          const sender = find(pc.getSenders(), (s) => s.track === track);\n          pc.removeTrack(sender);\n        }\n        else {\n          stream.removeTrack(track);\n        }\n      }\n    });\n  });\n});\n\nconst startReceivingMedia = curry((kind, pc) => {\n  let foundKind = false;\n  pc.getRemoteStreams().forEach((stream) => {\n    // Find all the tracks we've removed from the stream/pc so we can readd them\n    const tracks = getMediaTracksByKindByStream(kind, stream);\n    tracks.forEach((track) => {\n      foundKind = foundKind || true;\n      track.enabled = true;\n      // Because adapter.js doesn't actually hide all the cross browser\n      // inconsistencies\n      if (pc.addTrack) {\n        pc.addTrack(track, stream);\n      }\n      else {\n        stream.addTrack(track);\n      }\n    });\n    tracks.delete(stream);\n  });\n\n  return Promise.resolve();\n});\n\nconst stopReceivingMedia = curry((kind, pc) => {\n  pc.getRemoteStreams().forEach((stream) => {\n    stream.getTracks().forEach((track) => {\n      if (track.kind === kind) {\n        track.enabled = false;\n        // Store the tracks so we can add them back later (should the user want\n        // to mute/unmute)\n        storeMediaTrackByKindByStream(kind, stream, track);\n        if (pc.removeTrack) {\n          const receiver = find(pc.getSenders(), (r) => r.track === track);\n\n          try {\n            pc.removeTrack(receiver);\n          }\n          catch (reason) {\n            // eslint-disable-next-line no-console\n            console.warn(`webrtc: this browser has limited support for renegotiation; receiving ${kind} has been stopped, but will not be renegotiated`);\n          }\n        }\n        else {\n          stream.removeTrack(track);\n        }\n      }\n    });\n  });\n});\n\nexport const stopReceivingAudio = stopReceivingMedia(`audio`);\nexport const stopReceivingVideo = stopReceivingMedia(`video`);\nexport const startReceivingAudio = startReceivingMedia(`audio`);\nexport const startReceivingVideo = startReceivingMedia(`video`);\n\n/**\n * Adds a bandwith limit line to the sdp; without this line, calling fails\n * @param {string} sdp SDP\n * @private\n * @returns {string} The modified SDP\n */\nfunction limitBandwith(sdp) {\n  // TODO can limitBandwith be done with the sender/reciever apis?\n  return sdp.split(`\\r\\n`).reduce((lines, line) => {\n    lines.push(line);\n    if (line.startsWith(`m=`)) {\n      lines.push(`b=TIAS:${line.includes(`audio`) ? 64000 : 1000000}`);\n    }\n    return lines;\n  }, []).join(`\\r\\n`);\n}\n\n/**\n * Ends all streams for the specifed RTCPeerConnection\n * @param {RTCPeerConnection} pc The RTCPeerConnection for which to end all\n * streams\n * @private\n * @returns {undefined}\n */\nfunction endAllStreams(pc) {\n  reattachTracks(pc);\n  pc.getLocalStreams().forEach(stopStream);\n  pc.getRemoteStreams().forEach(stopStream);\n}\n\n/**\n * Stops the specifed stream's tracks and the stream (depending on browser\n * capabilities)\n * @param {MediaStream} stream The MediaStream to stop\n * @private\n * @returns {undefined}\n */\nfunction stopStream(stream) {\n  // need to reattach any removed tracks (even if they're stopped) to make sure\n  // the camera gets turned off.\n  if (stream.getTracks) {\n    stream.getTracks().forEach((track) => track.stop());\n  }\n\n  if (stream.stop) {\n    stream.stop();\n  }\n}\n\n/**\n * Attaches all tracks that were removed from the specifed RTCPeerConnection\n * (e.g. while muting said tracks). Without reattaching them, the camera may\n * never turn off\n * @param {RTCPeerConnection} pc The RTCPeerConnection for which to reattach tracks\n * @private\n * @returns {undefined}\n */\nfunction reattachTracks(pc) {\n  pc.getLocalStreams().forEach(reattachTracksForStream);\n}\n\n/**\n * Reattaches tracks for specifed stream\n * @param {MediaStream} stream The MediaStream to which to reattach tracks\n * @private\n * @returns {undefined}\n */\nfunction reattachTracksForStream(stream) {\n  const vt = getVideoTracksByStream(stream);\n  vt.forEach((track) => stream.addTrack(track));\n  vt.clear();\n\n  const at = getAudioTracksByStream(stream);\n  at.forEach((track) => stream.addTrack(track));\n  at.clear();\n}\n\n/**\n * Stops sending audio via the specifed RTCPeerConnection\n * @param {RTCPeerConnection} pc The RTCPeerConnection for which to stop audio\n * @private\n * @returns {Promise}\n */\nexport const startSendingAudio = startSendingMedia(`audio`);\n/**\n * Stops sending video via the specifed RTCPeerConnection\n * @param {RTCPeerConnection} pc The RTCPeerConnection for which to stop video\n * @private\n * @returns {Promise}\n */\nexport const startSendingVideo = startSendingMedia(`video`);\n/**\n * Starts sending audio via the specifed RTCPeerConnection\n * @param {RTCPeerConnection} pc The RTCPeerConnection for which to start audio\n * @private\n * @returns {Promise}\n */\nexport const stopSendingAudio = stopSendingMedia(`audio`);\n/**\n * Stops sending video via the specifed RTCPeerConnection\n * @param {RTCPeerConnection} pc The RTCPeerConnection for which to start video\n * @private\n * @returns {Promise}\n */\nexport const stopSendingVideo = stopSendingMedia(`video`);\n\n/**\n * Wrapper around navigator.mediaDevices.getUserMedia()\n * @param {MediaStreamConstraints} constraints if NODE_ENV is `test`, will\n * automatically add `{fake: true}`. If this is problematic for your use case,\n * you'll need to explicitly include `{fake: false}`\n * @private\n * @returns {Promise<MediaStream>} The resultant MediaStream\n */\nexport function getUserMedia(constraints) {\n  defaults(constraints, {fake: process.env.NODE_ENV === `test`});\n  return navigator.mediaDevices.getUserMedia(constraints);\n}\n\n/**\n * Creates an offer sdp based on the state of the specifed RTCPeerConnection and\n * offer options\n * @param {RTCPeerConnection} pc\n * @param { RTCOfferOptions} offerOptions\n * @private\n * @returns {Promise<string>} Resolves with the offer sdp\n */\nexport const createOffer = curry((pc, offerOptions) => {\n  offerOptions = offerOptions || {};\n  defaults(offerOptions, {\n    offerToReceiveVideo: true,\n    offerToReceiveAudio: true\n  });\n\n  const promise = new Promise((resolve) => {\n    pc.onicecandidate = (event) => {\n      if (!event.candidate) {\n        pc.onicecandidate = undefined;\n        resolve();\n      }\n    };\n\n    setTimeout(() => {\n      pc.onicecandidate = undefined;\n      resolve();\n    }, 500);\n\n  });\n\n  return pc.createOffer(offerOptions)\n    .then(tap((offer) => {offer.sdp = limitBandwith(offer.sdp);}))\n    .then(tap((offer) => {\n      if (process.env.LOG_SDP) {\n        // eslint-disable-next-line no-console\n        console.log(`offer`, offer.sdp);\n      }\n    }))\n    .then((offer) => pc.setLocalDescription(offer))\n    .then(() => Promise.resolve(promise))\n    // Apparently chrome somehow moves the bandwith limit out of the video\n    // section, so we need to reapply it.\n    .then(() => limitBandwith(pc.localDescription.sdp));\n});\n\n/**\n * Applies an incoming answer sdp to the specifed RTCPeerConnection\n * @param {RTCPeerConnection} pc\n * @param {string} sdp\n * @private\n * @returns {Promise}\n */\nexport const acceptAnswer = curry((pc, sdp) => {\n  if (process.env.LOG_SDP) {\n    // eslint-disable-next-line no-console\n    console.log(`answer`, sdp);\n  }\n  return pc.setRemoteDescription(new RTCSessionDescription({\n    sdp,\n    type: `answer`\n  }));\n});\n\n/**\n * Terminates the specifed RTCPeerConnection\n * @param {RTCPeerConnection} pc\n * @private\n * @returns {undefined}\n */\nexport const end = curry((pc) => {\n  if (pc.signalingState !== `closed`) {\n    endAllStreams(pc);\n    pc.close();\n  }\n});\n\nconst curriedAddStream = curry(addStream);\n\n/**\n * Adds the specifed stream to the specifed RTCPeerConnection\n * @name addStream\n * @param {PeerConnection} pc The RTCPeerConnection to which to add the stream\n * @param {MediaStream} stream The stream to add\n * @private\n * @returns {undefined}\n */\nexport {curriedAddStream as addStream};\n\n/**\n * Adds the specifed stream to the specifed RTCPeerConnection\n * @param {PeerConnection} pc The RTCPeerConnection to which to add the stream\n * @param {MediaStream} stream The stream to add\n * @private\n * @returns {undefined}\n */\nfunction addStream(pc, stream) {\n  // TODO do either of these return promises?\n  if (pc.addTrack) {\n    stream.getTracks().forEach((track) => pc.addTrack(track, stream));\n  }\n  else {\n    pc.addStream(stream);\n  }\n}\n\n/**\n * returns the direction line for the specifed media type.\n * @param {string} type\n * @param {RTCPeerConnection} pc\n * @private\n * @returns {string}\n */\nexport function mediaDirection(type, pc) {\n  if (pc.connectionState === `closed` || pc.signalingState === `closed`) {\n    return `inactive`;\n  }\n\n  if (!pc.localDescription) {\n    return `inactive`;\n  }\n  const sdp = transform.parse(pc.localDescription.sdp);\n  const media = find(sdp.media, {type});\n  if (!media) {\n    return `inactive`;\n  }\n\n  if (type === `audio` && media.direction === `sendonly`) {\n    const remoteSdp = transform.parse(pc.remoteDescription.sdp);\n    const remoteMedia = find(remoteSdp.media, {type});\n    if (remoteMedia && remoteMedia.direction === `inactive`) {\n      return `inactive`;\n    }\n  }\n\n  return media.direction;\n}\n"]}