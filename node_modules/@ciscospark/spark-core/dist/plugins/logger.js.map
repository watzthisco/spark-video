{"version":3,"sources":["../../src/plugins/logger.js"],"names":[],"mappings":";;;;;;AAMA;;;;AACA;;;;AAPA;;;;;;AASA,IAAM,aAAa;AACjB,SAAO,OADU;AAEjB,QAAM,gBAFW;AAGjB,QAAM,OAHW;AAIjB,SAAO,eAJU;AAKjB,SAAO;AALU,CAAnB;;AAQA;;;;;;;AAOA,SAAS,iBAAT,CAA2B,KAA3B,EAAkC;AAChC;AACA,MAAI,QAAQ,WAAW,KAAX,CAAZ;AACA,MAAI,KAAJ,EAAW;AACT,YAAQ,MAAM,KAAN,EAAR;AACA,WAAO,CAAC,QAAQ,KAAR,CAAR,EAAwB;AACtB,cAAQ,MAAM,GAAN,EAAR;AACD;AACF;;AAED,SAAO,QAAQ,KAAR,EAAe,IAAf,CAAoB,OAApB,CAAP;AACD;;AAED,IAAM,SAAS,sBAAY,MAAZ,CAAmB;AAChC,qBADgC;AAEhC,SAAO,0BAFyB;AAGhC,QAAM,yBAH0B;AAIhC,OAAK,wBAJ2B;AAKhC,QAAM,yBAL0B;AAMhC,SAAO,0BANyB;AAOhC,SAAO;AAPyB,CAAnB,CAAf;;AAUA,yCAAyB,MAAzB;;kBAEe,M","file":"logger.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport SparkPlugin from '../lib/spark-plugin';\nimport {registerPlugin} from '../spark-core';\n\nconst precedence = {\n  error: [`log`],\n  warn: [`error`, `log`],\n  info: [`log`],\n  debug: [`info`, `log`],\n  trace: [`debug`, `info`, `log`]\n};\n\n/**\n * Assigns the specified console method to Logger; uses `precedence` to fallback\n * to other console methods if the current environment doesn't provide the\n * specified level.\n * @param {string} level\n * @returns {Function}\n */\nfunction wrapConsoleMethod(level) {\n  /* eslint no-console: [0] */\n  let impls = precedence[level];\n  if (impls) {\n    impls = impls.slice();\n    while (!console[level]) {\n      level = impls.pop();\n    }\n  }\n\n  return console[level].bind(console);\n}\n\nconst Logger = SparkPlugin.extend({\n  namespace: `Logger`,\n  error: wrapConsoleMethod(`error`),\n  warn: wrapConsoleMethod(`warn`),\n  log: wrapConsoleMethod(`log`),\n  info: wrapConsoleMethod(`info`),\n  debug: wrapConsoleMethod(`debug`),\n  trace: wrapConsoleMethod(`trace`)\n});\n\nregisterPlugin(`logger`, Logger);\n\nexport default Logger;\n"]}