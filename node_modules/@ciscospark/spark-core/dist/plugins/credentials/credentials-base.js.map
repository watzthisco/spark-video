{"version":3,"sources":["../../../src/plugins/credentials/credentials-base.js"],"names":[],"mappings":"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","file":"credentials-base.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport Authorization from './authorization';\nimport {base64, oneFlight, retry} from '@ciscospark/common';\nimport {clone, has, isObject, pick} from 'lodash';\nimport grantErrors from './grant-errors';\nimport querystring from 'querystring';\nimport SparkPlugin from '../../lib/spark-plugin';\n\n/**\n * Helper. Returns just the response body\n * @param {http.IncomingMessage} res\n * @returns {Object}\n */\nfunction resolveWithResponseBody(res) {\n  return res.body;\n}\n\n/**\n * Helper. Converts a response body into an Authorization object\n * @param {http.IncomingMessage} res\n * @returns {Authorization}\n */\nfunction processGrant(res) {\n  return new Authorization(res.body);\n}\n\nconst CredentialsBase = SparkPlugin.extend({\n  derived: {\n    canRefresh: {\n      deps: [`authorization.canRefresh`],\n      fn() {\n        /* eslint camelcase: [0] */\n        return Boolean(this.config.oauth.client_id && this.config.oauth.client_secret && this.authorization && this.authorization.canRefresh);\n      }\n    },\n    isAuthenticated: {\n      deps: [`authorization.isAuthenticated`],\n      fn() {\n        return Boolean(this.authorization && this.authorization.isAuthenticated);\n      }\n    },\n    isAuthenticating: {\n      deps: [\n        `authorization.isRefreshing`,\n        `_isAuthenticating`\n      ],\n      fn() {\n        return this._isAuthenticating || this.authorization && this.authorization.isRefreshing;\n      }\n    },\n    isExpired: {\n      deps: [`authorization.isExpired`],\n      fn() {\n        return Boolean(this.authorization && this.authorization.isExpired);\n      }\n    }\n  },\n\n  namespace: `Credentials`,\n\n  props: {\n    authorization: {\n      type: `state`\n    },\n    clientAuthorization: {\n      type: `state`\n    },\n    name: {\n      setOnce: true,\n      type: `string`\n    },\n    orgId: {\n      setOnce: true,\n      type: `string`\n    }\n  },\n\n  session: {\n    _isAuthenticating: {\n      default: false,\n      type: `boolean`\n    },\n    password: `string`,\n    previousAuthorization: {\n      type: `state`\n    }\n  },\n\n  authenticate(...args) {\n    return this.authorize(...args);\n  },\n\n  authorize: oneFlight(`authorize`, function authenticate(options) {\n    /* eslint no-invalid-this: [0] */\n    this._isAuthenticating = true;\n    options = options || {};\n    if (options.code) {\n      this.logger.info(`credentials: auth code received, exchanging for access_token`);\n      return this.requestAuthorizationCodeGrant(options)\n        .then((res) => {\n          this._isAuthenticating = false;\n          return res;\n        });\n    }\n\n    if (this.canRefresh) {\n      this.logger.info(`credentials: refreshable, refreshing`);\n      return this.refresh(options)\n        .then((res) => {\n          this._isAuthenticating = false;\n          return res;\n        });\n    }\n\n    this.set(pick(options, `name`, `orgId`, `password`));\n\n    if (this.name && this.orgId && this.password) {\n      this.logger.info(`credentials: machine credentials received, authenticating`);\n      return this.requestSamlExtensionGrant(options)\n        .then((res) => {\n          this._isAuthenticating = false;\n          return res;\n        })\n        .catch((res) => {\n          this._isAuthenticating = false;\n          return Promise.reject(res);\n        });\n    }\n\n    this._isAuthenticating = false;\n    return Promise.reject(new Error(`not enough parameters to authenticate`));\n  }),\n\n  getAuthorization: oneFlight(`getAuthorization`, function getAuthorization() {\n    if (this.isAuthenticated) {\n      if (this.isExpired) {\n        if (this.canRefresh) {\n          return this.refresh()\n            .then(() => this.authorization.toString());\n        }\n\n        return Promise.reject(new Error(`Access token has expired or cannot be refreshed`));\n      }\n\n      return Promise.resolve(this.authorization.toString());\n    }\n\n    return Promise.reject(new Error(`not authenticated`));\n  }),\n\n  getClientAuthorization: oneFlight(`getClientCredentialsAuthorization`, function getClientCredentialsAuthorization() {\n    let promise;\n    if (!this.clientAuthorization || !this.clientAuthorization.isAuthenticated || this.clientAuthorization.isExpired) {\n      promise = this.requestClientCredentialsGrant();\n    }\n    else {\n      promise = Promise.resolve();\n    }\n\n    return promise\n      .then(() => this.clientAuthorization.toString());\n  }),\n\n  /**\n   * @returns {Promise}\n   */\n  logout() {\n    return Promise.all([\n      `authorization`,\n      `previousAuthorization`\n    ].map((key) => {\n      if (this[key]) {\n        return this[key].revoke()\n          .catch((reason) => {\n            this.logger.error(`credentials: ${key} revocation falied`, reason);\n          });\n      }\n      return Promise.resolve();\n    }));\n  },\n\n  /**\n   * Refreshes credentials with a refresh token\n   * @param {Object} options\n   * @param {Object} options.force If true, refresh the token even if the token\n   * appears unexpired\n   * @returns {Promise} Resolves when credentials have been refreshed\n   */\n  refresh: oneFlight(`refresh`, function refresh(options) {\n    /* eslint no-invalid-this: [0] */\n    this.logger.info(`credentials: refresh requested`);\n\n    options = options || {};\n\n    if (!options.force && !this.authorization.isExpired) {\n      this.logger.info(`credentials: authorization not expired, not refreshing`);\n      return Promise.resolve();\n    }\n\n    this.logger.info(`credentials: refreshing`);\n\n    return this.authorization.refresh(options)\n      .then(this._pushAuthorization.bind(this))\n      .catch(this._handleRefreshFailure.bind(this));\n  }),\n\n  requestAuthorizationCodeGrant: oneFlight(`requestAuthorizationCodeGrant`, function requestAuthorizationCodeGrant(options) {\n    const vars = {\n      'oauth.client_id': `CLIENT_ID`,\n      'oauth.client_secret': `CLIENT_SECRET`,\n      'oauth.redirect_uri': `REDIRECT_URI`\n    };\n\n    for (const key in vars) {\n      if (!has(this.config, key)) {\n        const baseVar = vars[key];\n        return Promise.reject(new Error(`config.credentials.${key} or CISCOSPARK_${baseVar} or COMMON_IDENTITY_${baseVar} or ${baseVar} must be defined`));\n      }\n    }\n\n    /* eslint camelcase: [0] */\n    this.logger.info(`credentials: requesting authorization code grant`);\n\n    options = options || {};\n    options.scope = options.scope || this.config.oauth.scope;\n\n    if (!options.code) {\n      return Promise.reject(new Error(`\\`options.code\\` is required`));\n    }\n\n    return this.request({\n      method: `POST`,\n      uri: this.config.oauth.tokenUrl,\n      form: {\n        grant_type: `authorization_code`,\n        redirect_uri: this.config.oauth.redirect_uri,\n        code: options.code\n      },\n      auth: {\n        user: this.config.oauth.client_id,\n        pass: this.config.oauth.client_secret,\n        sendImmediately: true\n      },\n      shouldRefreshAccessToken: false\n    })\n      .then(processGrant)\n      .then(this._pushAuthorization.bind(this))\n      .catch((res) => {\n        if (res.statusCode !== 400) {\n          return Promise.reject(res);\n        }\n\n        const ErrorConstructor = grantErrors.select(res.body.error);\n        return Promise.reject(new ErrorConstructor(res._res || res));\n      });\n  }),\n\n  requestClientCredentialsGrant: oneFlight(`requestClientCredentialsGrant`, function requestClientCredentialsGrant(options) {\n    const vars = {\n      'oauth.client_id': `CLIENT_ID`,\n      'oauth.client_secret': `CLIENT_SECRET`\n    };\n\n    for (const key in vars) {\n      if (!has(this.config, key)) {\n        const baseVar = vars[key];\n        return Promise.reject(new Error(`config.credentials.${key} or CISCOSPARK_${baseVar} or COMMON_IDENTITY_${baseVar} or ${baseVar} must be defined`));\n      }\n    }\n\n    this.logger.info(`credentials: requesting client credentials grant`);\n\n    options = options || {};\n    // Right now, admin is the only service that needs Client Credentials,\n    // so we`ll hard code that here. long term, we`ll want to keep track of\n    // scope used to request a specific token and (potentially) specify\n    // scope as an options passed to Clinet#request so it can pick the right\n    // token.\n    options.scope = options.scope || `webexsquare:admin`;\n\n    return this.request({\n      method: `POST`,\n      uri: this.config.oauth.tokenUrl,\n      form: {\n        grant_type: `client_credentials`,\n        scope: options.scope,\n        shouldRefreshAccessToken: false\n      },\n      auth: {\n        user: this.config.oauth.client_id,\n        pass: this.config.oauth.client_secret,\n        sendImmediately: true\n      }\n    })\n      .then(processGrant)\n      .then(this._pushClientCredentialsAuthorization.bind(this))\n      .catch((res) => {\n        if (res.statusCode !== 400) {\n          return Promise.reject(res);\n        }\n\n        const ErrorConstructor = grantErrors.select(res.body.error);\n        return Promise.reject(new ErrorConstructor(res._res || res));\n      });\n  }),\n\n  requestSamlExtensionGrant: oneFlight(`requestSamlExtensionGrant`, retry(function requestSamlExtensionGrant(options) {\n    options = options || {};\n    options.scope = options.scope || this.config.oauth.scope;\n\n    this.logger.info(`credentials: requesting SAML extension grant`);\n\n    return this._getSamlBearerToken(options)\n      .then(this._getOauthBearerToken.bind(this, options))\n      .then(processGrant)\n      .then(this._pushAuthorization.bind(this))\n      .catch((res) => {\n        if (res.statusCode !== 400) {\n          return Promise.reject(res);\n        }\n\n        const ErrorConstructor = grantErrors.select(res.body.error);\n        return Promise.reject(new ErrorConstructor(res._res || res));\n      });\n  })),\n\n  set(key, value) {\n    let attrs;\n    if (isObject(key)) {\n      attrs = key;\n    }\n    else {\n      attrs = {};\n      attrs[key] = value;\n    }\n\n    [\n      `authorization`,\n      `clientAuthorization`,\n      `previousAuthorization`\n    ].forEach((propName) => {\n      if (attrs[propName]) {\n        if (!(attrs[propName] instanceof Authorization)) {\n          attrs[propName] = new Authorization(attrs[propName]);\n        }\n        attrs[propName].parent = this;\n      }\n    });\n\n    /* eslint prefer-rest-params: [0] */\n    return Reflect.apply(SparkPlugin.prototype.set, this, arguments);\n  },\n\n  _buildLogoutUrl() {\n    // eslint doesn't yet handle nested strings quite right\n    /* eslint quotes: [0] */\n    return `${this.config.logoutUri}?${querystring.stringify({\n      type: 'logout',\n      goto: this.config.oauth.redirect_uri,\n      service: this.config.oauth.service\n    })}`;\n  },\n\n  _buildOAuthUrl: function _buildOAuthUrl(options) {\n    /* eslint camelcase: [0] */\n    const fields = [\n      `client_id`,\n      `redirect_uri`,\n      `scope`,\n      `service`\n    ];\n\n    const parameters = clone(options);\n\n    parameters.state = parameters.state || {};\n    if (!isObject(parameters.state)) {\n      throw new Error('if specified, `options.state` must be an object');\n    }\n\n    if (!parameters.response_type) {\n      throw new Error('`options.response_type` is required');\n    }\n\n    fields.forEach((key) => {\n      if (key in this.config.oauth) {\n        parameters[key] = this.config.oauth[key];\n      }\n      else {\n        throw new Error(`\\`${key}\\` is required`);\n      }\n    }, this);\n\n    // Some browser aparently don't parse nested querystrings very well, so\n    // we'll additionally base64url-encode the state\n    parameters.state = base64.toBase64Url(querystring.stringify(parameters.state));\n    return `${this.config.oauth.authorizationUrl}?${querystring.stringify(parameters)}`;\n  },\n\n  /**\n   * Converts a CI SAML Bearer Token to an OAuth Bearer Token.\n   * @param {Object} options\n   * @param {Object} options.scope\n   * @param {Object} samlData Response body from the CI SAML endpoint.\n   * @private\n   * @return {Promise} Resolves with the bot's credentials.\n   */\n  _getOauthBearerToken: oneFlight(`_getOauthBearerToken`, function _getOauthBearerToken(options, samlData) {\n    this.logger.info(`credentials: exchanging SAML Bearer Token for OAuth Bearer Token`);\n\n    const vars = {\n      'oauth.client_id': `CLIENT_ID`,\n      'oauth.client_secret': `CLIENT_SECRET`\n    };\n\n    for (const key in vars) {\n      if (!has(this.config, key)) {\n        const baseVar = vars[key];\n        return Promise.reject(new Error(`config.credentials.${key} or CISCOSPARK_${baseVar} or COMMON_IDENTITY_${baseVar} or ${baseVar} must be defined`));\n      }\n    }\n\n    return this.request({\n      method: `POST`,\n      uri: this.config.oauth.tokenUrl,\n      form: {\n        /* eslint camelcase: [0] */\n        grant_type: `urn:ietf:params:oauth:grant-type:saml2-bearer`,\n        assertion: samlData.BearerToken,\n        scope: options.scope\n      },\n      auth: {\n        user: this.config.oauth.client_id,\n        pass: this.config.oauth.client_secret,\n        sendImmediately: true\n      },\n      shouldRefreshAccessToken: false\n    });\n  }),\n\n  /**\n   * Retrieves a CI SAML Bearer Token\n   * @private\n   * @return {Promise} Resolves with an Object containing a `BearerToken` and an\n   * `AccountExpires`\n   */\n  _getSamlBearerToken: oneFlight(`_getSamlBearerToken`, function _getSamlBearerToken() {\n    this.logger.info(`credentials: requesting SAML Bearer Token`);\n\n    if (!this.orgId) {\n      return Promise.reject(new Error(`\\`this.orgId\\` is required`));\n    }\n\n    if (!this.name) {\n      return Promise.reject(new Error(`\\`this.name\\` is required`));\n    }\n\n    if (!this.password) {\n      return Promise.reject(new Error(`\\`this.password\\` is required`));\n    }\n\n    return this.request({\n      method: `POST`,\n      uri: `{this.config.samlUrl}/{$this.orgId}/v2/actions/GetBearerToken/invoke`,\n      body: pick(this, `name`, `password`),\n      shouldRefreshAccessToken: false\n    })\n      .then(resolveWithResponseBody);\n  }),\n\n  _handleRefreshFailure: function _handleRefreshFailure(res) {\n    if (res.error && res.error === 'invalid_request') {\n      this.logger.warn('token refresh failed: ', res.errorDescription);\n      this.unset('authorization');\n    }\n\n    return Promise.reject(res);\n  },\n\n  _pushClientCredentialsAuthorization: function _pushClientCredentialsAuthorization(authorization) {\n    this.logger.info('credentials: received client credentials');\n\n    this.clientAuthorization = authorization;\n  },\n\n  _pushAuthorization: function _pushAuthorization(authorization) {\n    this.logger.info('credentials: received authorization');\n\n    const previousAuthorization = this.previousAuthorization;\n    this.previousAuthorization = this.authorization;\n    this.authorization = authorization;\n\n    if (previousAuthorization) {\n      previousAuthorization.revoke();\n    }\n  }\n\n});\n\nexport default CredentialsBase;\n"]}