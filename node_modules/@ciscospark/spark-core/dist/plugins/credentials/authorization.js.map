{"version":3,"sources":["../../../src/plugins/credentials/authorization.js"],"names":[],"mappings":"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","file":"authorization.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\n/* eslint camelcase: [0] */\n\nimport grantErrors from './grant-errors';\nimport {has, pick} from 'lodash';\nimport {oneFlight} from '@ciscospark/common';\nimport SparkPlugin from '../../lib/spark-plugin';\n\nconst AuthorizationBase = SparkPlugin.extend({\n  derived: {\n    canRefresh: {\n      deps: [`refresh_token`],\n      fn() {\n        return Boolean(this.refresh_token);\n      }\n    },\n\n    isAuthenticated: {\n      deps: [\n        `access_token`,\n        `refresh_token`\n      ],\n      fn() {\n        return Boolean(this.access_token || this.refresh_token);\n      }\n    },\n\n    isExpired: {\n      cache: false,\n      deps: [\n        `access_token`,\n        `expires`\n      ],\n      fn() {\n        return Boolean(this.access_token && this.expires && Date.now() > this.expires);\n      }\n    },\n\n    isValid: {\n      cache: false,\n      deps: [\n        `access_token`,\n        `isExpired`,\n        `canRefresh`\n      ],\n      fn() {\n        return this.access_token && !this.isExpired || this.canRefresh;\n      }\n    }\n  },\n\n  namespace: `Credentials`,\n\n  props: {\n    access_token: `string`,\n    expires: `number`,\n    expires_in: `number`,\n    refresh_token: `string`,\n    refresh_token_expires: `number`,\n    refresh_token_expires_in: `number`,\n    token_type: {\n      default: `Bearer`,\n      type: `string`\n    }\n  },\n\n  session: {\n    isRefreshing: {\n      default: false,\n      type: `boolean`\n    }\n  },\n\n  toString() {\n    if (this.token_type && this.access_token) {\n      return `${this.token_type} ${this.access_token}`;\n    }\n    return ``;\n  },\n\n  initialize(...args) {\n    const now = Date.now();\n\n    if (!this.expires && this.expires_in) {\n      this.expires = now + this.expires_in * 1000;\n    }\n\n    if (!this.refresh_token_expires && this.refresh_token_expires_in) {\n      this.refresh_token_expires = now + this.refresh_token_expires_in * 1000;\n    }\n\n    return Reflect.apply(SparkPlugin.prototype.initialize, this, args);\n  },\n\n  refresh: oneFlight(`refresh`, function refresh() {\n    /* eslint no-invalid-this: [0] */\n    if (!this.canRefresh) {\n      return Promise.reject(new Error(`Authorization cannot be refreshed`));\n    }\n\n    const vars = {\n      'oauth.client_id': `CLIENT_ID`,\n      'oauth.client_secret': `CLIENT_SECRET`,\n      'oauth.redirect_uri': `REDIRECT_URI`\n    };\n\n    for (const key in vars) {\n      if (!has(this.config, key)) {\n        const baseVar = vars[key];\n        return Promise.reject(new Error(`config.credentials.${key} or CISCOSPARK_${baseVar} or COMMON_IDENTITY_${baseVar} or ${baseVar} must be defined`));\n      }\n    }\n\n    this.isRefreshing = true;\n\n    this.logger.info(`authorization: refreshing access token`);\n\n    return this.request({\n      method: `POST`,\n      uri: this.config.oauth.tokenUrl,\n      form: {\n        grant_type: `refresh_token`,\n        redirect_uri: this.config.oauth.redirect_uri,\n        refresh_token: this.refresh_token\n      },\n      auth: {\n        user: this.config.oauth.client_id,\n        pass: this.config.oauth.client_secret,\n        sendImmediately: true\n      },\n      shouldRefreshAccessToken: false\n    })\n      .then((res) => {\n        // If the authentication server did not send back a refresh_token, copy\n        // the current refresh token and related values onto the response.\n        if (!res.body.refresh_token) {\n          Object.assign(res.body, pick(this, `refresh_token`, `refresh_token_expires`, `refresh_token_expires_in`));\n        }\n\n        this.logger.info(`authorization: access token refreshed`);\n\n        // this.constructor *should* be Authorization. We can`t use it by name\n        // because this file defines AuthorizationBase.\n        return new this.constructor(res.body);\n      })\n      .catch((reason) => {\n        if (reason.statusCode !== 400) {\n          return Promise.reject(reason);\n        }\n\n        const ErrorConstructor = grantErrors.select(reason.body.error);\n        return Promise.reject(new ErrorConstructor(reason._res || reason));\n      })\n      .then((res) => {\n        this.isRefreshing = false;\n        return res;\n      })\n      .catch((res) => {\n        this.isRefreshing = false;\n        return Promise.reject(res);\n      });\n  }),\n\n  revoke: oneFlight(`revoke`, function revoke() {\n    /* eslint no-invalid-this: [0] */\n    if (this.isExpired || !this.isValid) {\n      this.logger.info(`authorization: access token already expired or invalid, not revoking`);\n\n      return Promise.resolve();\n    }\n\n    this.logger.info(`authorization: revoking access token`);\n\n    const vars = {\n      'oauth.client_id': `CLIENT_ID`,\n      'oauth.client_secret': `CLIENT_SECRET`\n    };\n\n    for (const key in vars) {\n      if (!has(this.config, key)) {\n        const baseVar = vars[key];\n        return Promise.reject(new Error(`config.credentials.${key} or CISCOSPARK_${baseVar} or COMMON_IDENTITY_${baseVar} or ${baseVar} must be defined`));\n      }\n    }\n\n    return this.request({\n      method: `POST`,\n      uri: this.config.oauth.revokeUrl,\n      form: {\n        token: this.access_token,\n        token_type_hint: `access_token`\n      },\n      auth: {\n        user: this.config.oauth.client_id,\n        pass: this.config.oauth.client_secret,\n        sendImmediately: true\n      },\n      shouldRefreshAccessToken: false\n    })\n      .then((res) => {\n        this.logger.info(`authorization: authorization revoked`);\n        this.unset(Object.keys(this.getAttributes({props: true})));\n        return res;\n      })\n      .catch((reason) => {\n        if (reason.statusCode !== 400) {\n          return Promise.reject(reason);\n        }\n\n        const ErrorConstructor = grantErrors.select(reason.body.error);\n        return Promise.reject(new ErrorConstructor(reason._res || reason));\n      });\n  })\n});\n\nexport default AuthorizationBase;\n"]}