{"version":3,"sources":["../../../src/plugins/credentials/credentials.shim.js"],"names":[],"mappings":"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","file":"credentials.shim.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\n/* eslint-env browser */\n\nimport {base64} from '@ciscospark/common';\nimport {oneFlight} from '@ciscospark/common';\nimport {assign, clone, has, omit, pick} from 'lodash';\nimport querystring from 'querystring';\nimport url from 'url';\nimport uuid from 'uuid';\nimport Authorization from './authorization';\nimport CredentialsBase from './credentials-base';\n\n/**\n * @private\n * @returns {undefined}\n */\nfunction noop() {/* eslint no-empty:[0] */}\n\nconst Credentials = CredentialsBase.extend({\n  authorize: oneFlight(`authorize`, function authorize(options) {\n    /* eslint complexity: [0] */\n    /* eslint camelcase: [0] */\n    /* eslint no-invalid-this: [0] */\n\n    this.logger.info(`credentials(shim): authenticating`);\n\n    options = options || {};\n    if (this.isAuthenticated && !options.force) {\n      this.logger.info(`credentials(shim): authentication not expired, not authenticating`);\n      return Promise.resolve();\n    }\n\n    this.set(pick(options, `name`, `orgId`, `password`));\n    if (this.canRefresh || options.code || this.name && this.orgId && this.password) {\n      /* eslint prefer-rest-params: [0] */\n      return Reflect.apply(CredentialsBase.prototype.authorize, this, arguments);\n    }\n\n    options.state = options.state || {};\n    options.state.csrf_token = options.state.csrf_token || this._generateSecurityToken();\n\n    this._isAuthenticating = true;\n    switch (this.config.clientType) {\n    case `confidential`:\n      return this.initiateAuthorizationCodeGrant(options);\n    case `public`:\n      return this.initiateImplicitGrant(options);\n    default:\n      return Promise.reject(new Error(`config.credentials.clientType must be defined`));\n    }\n  }),\n\n  initiateImplicitGrant(options) {\n    const vars = {\n      'oauth.client_id': `CLIENT_ID`,\n      'oauth.redirect_uri': `REDIRECT_URI`,\n      'oauth.scope': `SCOPE`\n    };\n\n    for (const key in vars) {\n      if (!has(this.config, key)) {\n        const baseVar = vars[key];\n        return Promise.reject(new Error(`config.credentials.${key} or CISCOSPARK_${baseVar} or COMMON_IDENTITY_${baseVar} or ${baseVar} must be defined`));\n      }\n    }\n\n    this.logger.info(`credentials(shim): initiating implicit grant flow`);\n\n    /* eslint camelcase: [0] */\n    window.location = this._buildOAuthUrl(assign({response_type: `token`}, options));\n\n    // Return an unreasolved promise to suppress console errors.\n    return new Promise(noop);\n  },\n\n  initiateAuthorizationCodeGrant(options) {\n    const vars = {\n      'oauth.client_id': `CLIENT_ID`,\n      'oauth.client_secret': `CLIENT_SECRET`,\n      'oauth.redirect_uri': `REDIRECT_URI`,\n      'oauth.scope': `SCOPE`\n    };\n\n    for (const key in vars) {\n      if (!has(this.config, key)) {\n        const baseVar = vars[key];\n        return Promise.reject(new Error(`config.credentials.${key} or CISCOSPARK_${baseVar} or COMMON_IDENTITY_${baseVar} or ${baseVar} must be defined`));\n      }\n    }\n\n    this.logger.info(`credentials(shim): initiating authorization code grant flow`);\n\n    window.location = this._buildOAuthUrl(assign({response_type: `code`}, options));\n    return new Promise(noop);\n  },\n\n  initialize() {\n    // AmpersandState is a little weird about initialization order. Code that\n    // depends on this.config needs to run after SparkCore#initialize executes,\n    // so, we'll use process.nextTick to run the following block on the next\n    // execution cycle.\n    process.nextTick(() => {\n      const location = url.parse(window.location.href, true);\n\n      let query = clone(location.query);\n\n      if (query.code) {\n        Reflect.deleteProperty(location.query, `code`);\n        Reflect.deleteProperty(location.query, `state`);\n\n        this._updateLocation(location);\n\n        // Though initialize is a synchronous call, it should be safe to\n        // call authenticate() because it'll get called again later but end\n        // up cached via oneFlight.\n        // Call spark.authenticate to make sure we trigger a device refresh.\n        return this.spark.authenticate(query);\n      }\n\n      if (query.access_token) {\n        location.query = this._extractTokenInfo(query);\n        this._updateLocation(location);\n        return Promise.resolve(noop);\n      }\n\n      let hash = location.hash || ``;\n      if (hash.includes(`#`)) {\n        hash = hash.substr(1);\n      }\n\n      query = querystring.parse(hash);\n      if (query.access_token) {\n        location.hash = this._extractTokenInfo(query);\n        this._updateLocation(location);\n      }\n\n      return Promise.resolve();\n    });\n  },\n\n  logout() {\n    this.logger.info(`credentials(shim): logging out`);\n\n    /* eslint prefer-rest-params: [0] */\n    return Reflect.apply(CredentialsBase.prototype.logout, this, arguments)\n      .then(() => {\n        window.location = this._buildLogoutUrl();\n      });\n  },\n\n  _extractTokenInfo(query) {\n    const tokenKeys = [\n      `access_token`,\n      `expires_in`,\n      `token_type`,\n      `refresh_token`,\n      `refresh_token_expires_in`\n    ];\n\n    query.state = querystring.parse(base64.fromBase64url(query.state));\n\n    this._verifySecurityToken(query.state.csrf_token);\n\n    const token = pick(query, tokenKeys);\n    token.expires_in = parseInt(token.expires_in, 10);\n    token.refresh_token_expires_in = parseInt(token.refresh_token_expires_in, 10);\n    const auth = new Authorization(token);\n    this._pushAuthorization(auth);\n\n    query = omit(query, tokenKeys);\n    query.state = omit(query.state, `csrf_token`);\n    if (Object.keys(query.state).length === 0) {\n      Reflect.deleteProperty(query, `state`);\n    }\n    else {\n      query.state = base64.toBase64Url(querystring.stringify(query.state));\n    }\n\n    return query;\n  },\n\n  _generateSecurityToken() {\n    this.logger.info(`credentials(shim): generating csrf token`);\n\n    const token = uuid.v4();\n    sessionStorage.setItem(`oauth2-csrf-token`, token);\n    return token;\n  },\n\n  _verifySecurityToken(token) {\n    this.logger.info(`credentials(shim): verifying csrf token`);\n\n    const _token = sessionStorage.getItem(`oauth2-csrf-token`);\n    sessionStorage.removeItem(`oauth2-csrf-token`);\n\n    if (token !== _token) {\n      throw new Error(`CSRF token ${token} does not match stored token ${_token}`);\n    }\n  },\n\n  _updateLocation(location) {\n    if (typeof location !== `string`) {\n      if (location.query) {\n        Reflect.deleteProperty(location, `search`);\n      }\n      if (typeof location.hash !== `string`) {\n        location.hash = querystring.stringify(location.hash);\n      }\n      location = url.format(location);\n    }\n\n    this.logger.info(`credentials(shim): updating browser location`, location);\n    // It's pretty unlikely the SDK will be used in a browser that doesn't\n    // support the history API, so we'll just ignore the cases where it's not\n    // available.\n    if (window.history && window.history.replaceState) {\n      window.history.replaceState({}, null, location);\n    }\n  }\n});\n\nexport default Credentials;\n"]}