{"version":3,"sources":["../../../src/plugins/credentials/auth-interceptor.js"],"names":[],"mappings":"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","file":"auth-interceptor.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {Interceptor} from '@ciscospark/http-core';\n\n/**\n * @class\n */\nexport default class AuthInterceptor extends Interceptor {\n  /**\n   * @returns {AuthInterceptor}\n   */\n  static create() {\n    return new AuthInterceptor({spark: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    // If Authorizations is already set, don't overwrite it\n    if (`authorization` in options.headers) {\n      // If Authorization is set to null, false, or undefined, delete it to\n      // prevent a CORS preflight.\n      if (!options.headers.authorization) {\n        Reflect.deleteProperty(options.headers, `authorization`);\n      }\n      return options;\n    }\n\n    return Promise.all([\n      this.requiresCredentials(options),\n      this.requiresClientCredentials(options)\n    ])\n      .then((results) => {\n        const [requiresCredentials, requiresClientCredentials] = results;\n        if (requiresCredentials) {\n          return this.spark.credentials.getAuthorization();\n        }\n        else if (requiresClientCredentials) {\n          return this.spark.credentials.getClientCredentials();\n        }\n        return null;\n      })\n      .then((authorization) => {\n        options.headers.authorization = authorization;\n        return options;\n      });\n  }\n\n  /**\n   * @see Interceptor#onRequestError\n   * @param {Object} options\n   * @param {Error} reason\n   * @returns {Object}\n   */\n  onRequestError(options, reason) {\n    return this.shouldAttemptReauth(reason, options)\n      .then((shouldAttemptReauth) => {\n        if (shouldAttemptReauth) {\n          this.spark.logger.info(`auth: received 401, attempting to reauthenticate`);\n\n          if (reason.options.headers) {\n            Reflect.deleteProperty(reason.options.headers, `authorization`);\n          }\n\n          return this.spark.credentials.authorize({force: true})\n            .then(() => this.replay(options));\n        }\n\n        return Promise.reject(reason);\n      });\n  }\n\n  /**\n   * Replays the request\n   * @param {Object} options\n   * @returns {Object}\n   */\n  replay(options) {\n    options.replayCount = options.replayCount || 1;\n\n    this.spark.logger.info(`auth: replaying request ${options.replayCount} time`);\n\n    if (options.replayCount > this.spark.config.maxReplayAttempts) {\n      this.spark.logger.error(`auth: failed after ${this.spark.config.maxReplayAttempts} replay attempts`);\n      return Promise.reject(new Error(`Failed after ${this.spark.config.maxReplayAttempts} replay attempts`));\n    }\n\n    return this.spark.request(options);\n  }\n\n  /**\n   * Indicates whether or not the current request requires credentials\n   * @param {Object} options\n   * @returns {Promise<boolean>}\n   */\n  requiresCredentials(options) {\n    this.spark.logger.warn(`AuthInterceptor: #requiresCredentials should be overridden`);\n    if (options.uri.includes(this.spark.config.credentials.oauth.tokenUrl)) {\n      return Promise.resolve(false);\n    }\n\n    if (options.uri.includes(this.spark.config.credentials.oauth.authorizeUrl)) {\n      return Promise.resolve(false);\n    }\n\n    if (options.uri.includes(this.spark.config.credentials.samlUrl)) {\n      return Promise.resolve(false);\n    }\n\n    return Promise.resolve(true);\n  }\n\n  /**\n   * Indicates whether or not the current request requires client credentials\n   * @returns {Promise<boolean>}\n   */\n  requiresClientCredentials() {\n    this.spark.logger.warn(`AuthInterceptor: #requiresClientCredentials should be overridden`);\n    return Promise.resolve(false);\n  }\n\n  /**\n   * Indicates whether or not the current request should refresh its access\n   * token in event of a 401\n   * @param {Error} reason\n   * @param {Object} options\n   * @returns {Promise<boolean>}\n   */\n  shouldAttemptReauth(reason, options) {\n    if (options && options.shouldRefreshAccessToken === false) {\n      return Promise.resolve(false);\n    }\n\n    if (reason.statusCode === 401) {\n      return Promise.resolve(true);\n    }\n\n    return Promise.resolve(false);\n  }\n}\n"]}