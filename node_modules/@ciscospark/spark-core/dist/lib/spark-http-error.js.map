{"version":3,"sources":["../../src/lib/spark-http-error.js"],"names":[],"mappings":";;;;;;;;;;AAMA;;;;AACA;;;;AAPA;;;;;;AASA,IAAM,iBAAiB,gDAAuB;AAC5C,SAD4C,mBACpC,GADoC,EACtB;AAAA;;AAAA,sCAAN,IAAM;AAAN,UAAM;AAAA;;AACpB;AACA,QAAI,UAAU,6CAAU,SAAV,CAAoB,OAApB,EAA4B,IAA5B,+BAAiC,IAAjC,EAAuC,GAAvC,SAA+C,IAA/C,EAAd;;AAEA,kCAAuB,IAAvB,aAAwC;AACtC,kBAAY,KAD0B;AAEtC,aAAO,IAAI;AAF2B,KAAxC;;AAKA,QAAI,KAAK,OAAL,CAAa,GAAjB,EAAsB;AACpB,wBAAgB,KAAK,OAAL,CAAa,MAA7B,SAAuC,KAAK,OAAL,CAAa,GAApD;AACD,KAFD,MAGK,IAAI,KAAK,OAAL,CAAa,GAAjB,EAAsB;AACzB,wBAAgB,KAAK,OAAL,CAAa,MAA7B,SAAuC,KAAK,OAAL,CAAa,GAApD;AACD,KAFI,MAGA;AACH,wBAAgB,KAAK,OAAL,CAAa,MAA7B,SAAuC,KAAK,OAAL,CAAa,OAAb,CAAqB,WAArB,EAAvC,SAA6E,KAAK,OAAL,CAAa,QAA1F;AACD;AACD,yCAAmC,KAAK,OAAL,CAAa,OAAb,CAAqB,UAAxD;AACA;;AAEA,WAAO,OAAP;AACD,GAvB2C;;AAwB5C;AAxB4C,CAAvB,CAAvB;;AA2BA,oBAAU,YAAV,CAAuB,cAAvB;;kBAEe,c","file":"spark-http-error.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport extendError from 'extend-error';\nimport {HttpError} from '@ciscospark/http-core';\n\nconst SparkHttpError = extendError(HttpError, {\n  parseFn(res, ...rest) {\n    /* eslint prefer-reflect: [0] */\n    let message = HttpError.prototype.parseFn.call(this, res, ...rest);\n\n    Reflect.defineProperty(this, `options`, {\n      enumerable: false,\n      value: res.options\n    });\n\n    if (this.options.url) {\n      message += `\\n${this.options.method} ${this.options.url}`;\n    }\n    else if (this.options.uri) {\n      message += `\\n${this.options.method} ${this.options.uri}`;\n    }\n    else {\n      message += `\\n${this.options.method} ${this.options.service.toUpperCase()}/${this.options.resource}`;\n    }\n    message += `\\nWEBEX_TRACKING_ID: ${this.options.headers.trackingid}`;\n    message += `\\n`;\n\n    return message;\n  },\n  subTypeName: `SparkHttpError`\n});\n\nHttpError.makeSubTypes(SparkHttpError);\n\nexport default SparkHttpError;\n"]}