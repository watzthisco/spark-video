'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SparkTrackingIdInterceptor = exports.RequestTimingInterceptor = exports.ResponseLoggerInterceptor = exports.RequestLoggerInterceptor = exports.RedirectInterceptor = exports.NetworkTimingInterceptor = exports.AuthInterceptor = exports.SparkPlugin = exports.SparkHttpError = exports.children = undefined;

var _defineProperty = require('babel-runtime/core-js/reflect/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _apply = require('babel-runtime/core-js/reflect/apply');

var _apply2 = _interopRequireDefault(_apply);

var _isFunction = require('lodash/isFunction');

var _isFunction2 = _interopRequireDefault(_isFunction);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _merge = require('lodash/merge');

var _merge2 = _interopRequireDefault(_merge);

var _get = require('lodash/get');

var _get2 = _interopRequireDefault(_get);

exports.default = ProxySpark;
exports.registerPlugin = registerPlugin;

var _sparkHttpError = require('./lib/spark-http-error');

Object.defineProperty(exports, 'SparkHttpError', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_sparkHttpError).default;
  }
});

var _sparkPlugin = require('./lib/spark-plugin');

Object.defineProperty(exports, 'SparkPlugin', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_sparkPlugin).default;
  }
});

var _authInterceptor = require('./plugins/credentials/auth-interceptor');

Object.defineProperty(exports, 'AuthInterceptor', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_authInterceptor).default;
  }
});

var _networkTiming = require('./interceptors/network-timing');

Object.defineProperty(exports, 'NetworkTimingInterceptor', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_networkTiming).default;
  }
});

var _redirect = require('./interceptors/redirect');

Object.defineProperty(exports, 'RedirectInterceptor', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_redirect).default;
  }
});

var _requestLogger = require('./interceptors/request-logger');

Object.defineProperty(exports, 'RequestLoggerInterceptor', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_requestLogger).default;
  }
});

var _responseLogger = require('./interceptors/response-logger');

Object.defineProperty(exports, 'ResponseLoggerInterceptor', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_responseLogger).default;
  }
});

var _requestTiming = require('./interceptors/request-timing');

Object.defineProperty(exports, 'RequestTimingInterceptor', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_requestTiming).default;
  }
});

var _sparkTrackingId = require('./interceptors/spark-tracking-id');

Object.defineProperty(exports, 'SparkTrackingIdInterceptor', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_sparkTrackingId).default;
  }
});

var _httpCore = require('@ciscospark/http-core');

var _ampersandState = require('ampersand-state');

var _ampersandState2 = _interopRequireDefault(_ampersandState);

var _networkTiming2 = _interopRequireDefault(_networkTiming);

var _redirect2 = _interopRequireDefault(_redirect);

var _requestLogger2 = _interopRequireDefault(_requestLogger);

var _requestTiming2 = _interopRequireDefault(_requestTiming);

var _responseLogger2 = _interopRequireDefault(_responseLogger);

var _sparkHttpError2 = _interopRequireDefault(_sparkHttpError);

var _sparkTrackingId2 = _interopRequireDefault(_sparkTrackingId);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**!
 *
 * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.
 * @private
 */

var constructorCalled = false;
var derived = {};

/**
 * List of loaded plugins. Only exported so that plugins can see which other
 * plugins have been loaded to avoid clobbering eachother (THIS IS A TEMPORARY
 * MEASURE!)
 * @private
 * @type {Object}
 */
var children = exports.children = {};

var Spark = void 0;

var interceptors = {
  SparkTrackingIdInterceptor: function SparkTrackingIdInterceptor() {
    return _sparkTrackingId2.default.create({
      prefix: (0, _get2.default)(this, 'config.trackingIdPrefix', 'spark-js-sdk')
    });
  },

  /* eslint no-extra-parens: [0] */
  RequestLoggerInterceptor: process.env.ENABLE_NETWORK_LOGGING || process.env.ENABLE_VERBOSE_NETWORK_LOGGING ? _requestLogger2.default.create : undefined,
  ResponseLoggerInterceptor: process.env.ENABLE_NETWORK_LOGGING || process.env.ENABLE_VERBOSE_NETWORK_LOGGING ? _responseLogger2.default.create : undefined,
  RequestTimingInterceptor: _requestTiming2.default.create,
  UrlInterceptor: undefined,
  AuthInterceptor: undefined,
  RedirectInterceptor: _redirect2.default.create,
  HttpStatusInterceptor: function HttpStatusInterceptor() {
    return _httpCore.HttpStatusInterceptor.create({
      error: _sparkHttpError2.default
    });
  },

  NetworkTimingInterceptor: _networkTiming2.default.create
};

var preInterceptors = ['ResponseLoggerInterceptor', 'RequestTimingInterceptor', 'SparkTrackingIdInterceptor'];

var postInterceptors = ['NetworkTimingInterceptor', 'RequestLoggerInterceptor'];

var SparkCore = _ampersandState2.default.extend({
  session: {
    config: {
      type: 'object'
    },
    request: {
      setOnce: true,
      // It's supposed to be a function, but that's not a type defined in
      // Ampersand
      type: 'any'
    }
  },

  authenticate: function authenticate() {
    var _credentials;

    return (_credentials = this.credentials).authenticate.apply(_credentials, arguments);
  },
  authorize: function authorize() {
    var _credentials2;

    return (_credentials2 = this.credentials).authorize.apply(_credentials2, arguments);
  },
  refresh: function refresh() {
    var _credentials3;

    return (_credentials3 = this.credentials).refresh.apply(_credentials3, arguments);
  },
  initialize: function initialize() {
    var _this = this;

    this.config = (0, _merge2.default)({}, _config2.default, this.config);

    // Make nested events propagate in a consistent manner
    (0, _keys2.default)(children).forEach(function (key) {
      _this.listenTo(_this[key], 'change', function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        args.unshift('change:' + key);
        _this.trigger.apply(_this, args);
      });
    });

    var addInterceptor = function addInterceptor(ints, key) {
      var interceptor = interceptors[key];

      if (!(0, _isFunction2.default)(interceptor)) {
        return ints;
      }

      // This is a bit of a hack, but we can enhance it later.
      var int = (0, _apply2.default)(interceptor, _this, []);
      if (int instanceof _sparkTrackingId2.default) {
        (0, _defineProperty2.default)(_this, 'trackingId', {
          enumerable: false,
          get: function get() {
            return int._generateTrackingId();
          }
        });
      }

      ints.push(int);

      return ints;
    };

    var ints = [];
    ints = preInterceptors.reduce(addInterceptor, ints);
    ints = (0, _keys2.default)(interceptors).filter(function (key) {
      return !(preInterceptors.includes(key) || postInterceptors.includes(key));
    }).reduce(addInterceptor, ints);
    ints = postInterceptors.reduce(addInterceptor, ints);

    this.request = (0, _httpCore.defaults)({
      json: true,
      interceptors: ints
    });
  },
  logout: function logout() {
    var _credentials4;

    return (_credentials4 = this.credentials).logout.apply(_credentials4, arguments);
  }
});

/**
 * @returns {undefined}
 */
function makeSparkConstructor() {
  Spark = SparkCore.extend({
    children: children,
    derived: derived
  });
}

/**
 * @param {Object} attrs
 * @param {Object} attrs.credentials
 * @param {Object} attrs.config
 * @returns {Spark}
 */
function ProxySpark() {
  if (!Spark) {
    makeSparkConstructor();
  }

  constructorCalled = true;

  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  var spark = new (Function.prototype.bind.apply(Spark, [null].concat(args)))();
  return spark;
}

/**
 * @method registerPlugin
 * @param {string} name
 * @param {function} constructor
 * @param {Object} options
 * @param {Array<string>} options.proxies
 * @param {Object} options.interceptors
 * @returns {null}
 */
function registerPlugin(name, constructor, options) {
  /* eslint complexity: [0] */
  if (constructorCalled) {
    var message = 'registerPlugin() should not be called after instantiating a Spark instance';
    /* eslint no-console: [0] */
    console.warn(message);
    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      throw new Error(message);
    }
  }

  options = options || {};

  if (!children[name] || options.replace) {
    children[name] = constructor;

    if (options.proxies) {
      options.proxies.forEach(function (key) {
        derived[key] = {
          deps: [name + '.' + key],
          fn: function fn() {
            return this[name][key];
          }
        };
      });
    }

    if (options.interceptors) {
      (0, _keys2.default)(options.interceptors).forEach(function (key) {
        interceptors[key] = options.interceptors[key];
      });
    }

    if (options.config) {
      (0, _merge2.default)(_config2.default, options.config);
    }

    makeSparkConstructor();
  }
}
//# sourceMappingURL=spark-core.js.map
