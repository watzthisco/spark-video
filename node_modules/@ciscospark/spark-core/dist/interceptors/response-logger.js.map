{"version":3,"sources":["../../src/interceptors/response-logger.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;;;AACA;;;;AAEA;;;;IAGqB,yB;;;;;;;;;;;;AAQnB;;;;;;+BAMW,O,EAAS,Q,EAAU;AAC5B,UAAM,MAAM,IAAI,IAAJ,EAAZ;AACA,WAAK,mBAAL,CAAyB,OAAzB,EAAkC,QAAlC;;AAEA,UAAI,QAAQ,GAAR,CAAY,8BAAhB,EAAgD;AAC9C,gBAAQ,GAAR,sBAAiC,IAAI,OAAJ,EAAjC,EAAgD,IAAI,WAAJ,EAAhD;;AAEA,YAAI,OAAO,SAAS,IAAhB,iBAAqC,OAAO,QAAP,CAAgB,SAAS,IAAzB,CAAzC,EAAyE;AACvE,kBAAQ,GAAR;AACD,SAFD,MAGK,IAAI,OAAO,SAAS,IAAhB,aAAJ,EAAuC;AAC1C,cAAI;AACF,oBAAQ,GAAR,eAA0B,eAAK,OAAL,CAAa,SAAS,IAAtB,EAA4B,EAAC,OAAO,IAAR,EAA5B,CAA1B;AACD,WAFD,CAGA,OAAO,GAAP,EAAY;AACV,oBAAQ,GAAR,qCAAgD,GAAhD;AACD;AACF;AACF;AACD,cAAQ,GAAR;;AAEA,aAAO,QAAP;AACD;;AAED;;;;;;;;;oCAMgB,O,EAAS,M,EAAQ;AAC/B,UAAM,MAAM,IAAI,IAAJ,EAAZ;AACA,WAAK,mBAAL,CAAyB,OAAzB,EAAkC,MAAlC;;AAEA,UAAI,QAAQ,GAAR,CAAY,8BAAhB,EAAgD;AAC9C,gBAAQ,GAAR,sBAAiC,IAAI,OAAJ,EAAjC,EAAgD,IAAI,WAAJ,EAAhD;AACA,YAAI;AACF,kBAAQ,KAAR,eAA4B,eAAK,OAAL,CAAa,OAAO,IAApB,EAA0B,EAAC,OAAO,IAAR,EAA1B,CAA5B;AACD,SAFD,CAGA,OAAO,GAAP,EAAY;AACV,kBAAQ,KAAR,eAA4B,OAAO,IAAnC;AACD;AACF;AACD,cAAQ,GAAR;;AAEA,aAAO,kBAAQ,MAAR,CAAe,MAAf,CAAP;AACD;;AAED;;;;;;;;;wCAMoB,O,EAAS,Q,EAAU;AACrC,cAAQ,GAAR,iBAA4B,SAAS,UAArC;AACA,cAAQ,GAAR,sBAAiC,mBAAI,OAAJ,2BAAsC,mBAAI,QAAJ,uBAAvE;AACA,cAAQ,GAAR,sBAAiC,QAAQ,QAAR,CAAiB,UAAjB,GAA8B,QAAQ,QAAR,CAAiB,YAAhF;AACA,cAAQ,GAAR,yBAAoC,QAAQ,QAAR,CAAiB,UAAjB,GAA8B,QAAQ,QAAR,CAAiB,YAAnF;AACD;;;;AAxED;;;6BAGgB;AACd,aAAO,IAAI,yBAAJ,CAA8B,IAA9B,CAAP;AACD;;;yBArBH;;;;;;AAMC;;kBASoB,yB","file":"response-logger.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\n /* eslint no-console:[0] */\n\nimport {get} from 'lodash';\nimport util from 'util';\nimport {Interceptor} from '@ciscospark/http-core';\n\n/**\n * @class\n */\nexport default class ResponseLoggerInterceptor extends Interceptor {\n  /**\n   * @returns {ResponseLoggerInterceptor}\n   */\n  static create() {\n    return new ResponseLoggerInterceptor(this);\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @param {HttpResponse} response\n   * @returns {Object}\n   */\n  onResponse(options, response) {\n    const now = new Date();\n    this.printResponseHeader(options, response);\n\n    if (process.env.ENABLE_VERBOSE_NETWORK_LOGGING) {\n      console.log(`timestamp (end): `, now.getTime(), now.toISOString());\n\n      if (typeof response.body === `string` || Buffer.isBuffer(response.body)) {\n        console.log(`Response: `, `Not printed, it\\`s probably a file`);\n      }\n      else if (typeof response.body === `object`) {\n        try {\n          console.log(`Response: `, util.inspect(response.body, {depth: null}));\n        }\n        catch (err) {\n          console.log(`Response: `, `[Not Serializable]`, err);\n        }\n      }\n    }\n    console.log(`\\\\**********************************************************************/`);\n\n    return response;\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @param {Object} reason\n   * @returns {Object}\n   */\n  onResponseError(options, reason) {\n    const now = new Date();\n    this.printResponseHeader(options, reason);\n\n    if (process.env.ENABLE_VERBOSE_NETWORK_LOGGING) {\n      console.log(`timestamp (end): `, now.getTime(), now.toISOString());\n      try {\n        console.error(`Response: `, util.inspect(reason.body, {depth: null}));\n      }\n      catch (err) {\n        console.error(`Response: `, reason.body);\n      }\n    }\n    console.log(`\\\\**********************************************************************/`);\n\n    return Promise.reject(reason);\n  }\n\n  /**\n   * Prints the basic header\n   * @param {Object} options\n   * @param {HttpResponse|SparkHttpError} response\n   * @returns {undefined}\n   */\n  printResponseHeader(options, response) {\n    console.log(`Status Code:`, response.statusCode);\n    console.log(`WEBEX_TRACKINGID:`, get(options, `headers.trackingid`) || get(response, `headers.trackingid`));\n    console.log(`Network duration:`, options.$timings.networkEnd - options.$timings.networkStart);\n    console.log(`Processing duration:`, options.$timings.requestEnd - options.$timings.requestStart);\n  }\n}\n"]}