{"version":3,"sources":["../../src/interceptors/redirect.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;;;AAPA;;;;;;AASA,IAAM,4CAAN;AACA,IAAM,qCAAN;;AAEA;;;;IAGqB,mB;;;;;;;;;;;;AAQnB;;;;;8BAKU,O,EAAS;AACjB,UAAI,QAAQ,GAAR,CAAY,QAAZ,CAAqB,KAAK,KAAL,CAAW,MAAX,CAAkB,WAAlB,CAA8B,OAAnD,KAA+D,QAAQ,GAAR,CAAY,QAAZ,CAAqB,KAAK,KAAL,CAAW,MAAX,CAAkB,WAAlB,CAA8B,KAA9B,CAAoC,QAAzD,CAAnE,EAAuI;AACrI,eAAO,OAAP;AACD;;AAED,cAAQ,OAAR,CAAgB,iBAAhB,IAAqC,IAArC;AACA,cAAQ,cAAR,GAAyB,QAAQ,cAAR,IAA0B,CAAnD;AACA,aAAO,OAAP;AACD;;AAED;;;;;;;;;+BAMW,O,EAAS,Q,EAAU;AAC5B,UAAI,SAAS,OAAT,IAAoB,SAAS,OAAT,CAAiB,kBAAjB,CAAxB,EAA8D;AAC5D,kBAAU,qBAAM,OAAN,CAAV;AACA,gBAAQ,GAAR,GAAc,SAAS,OAAT,CAAiB,kBAAjB,CAAd;AACA,gBAAQ,cAAR,IAA0B,CAA1B;AACA,YAAI,QAAQ,cAAR,GAAyB,KAAK,KAAL,CAAW,MAAX,CAAkB,oBAA/C,EAAqE;AACnE,iBAAO,kBAAQ,MAAR,CAAe,IAAI,KAAJ,8BAAf,CAAP;AACD;;AAED,eAAO,KAAK,KAAL,CAAW,OAAX,CAAmB,OAAnB,CAAP;AACD;;AAED,aAAO,QAAP;AACD;;;;AAzCD;;;6BAGgB;AACd,aAAO,IAAI,mBAAJ,CAAwB,EAAC,OAAO,IAAR,EAAxB,CAAP;AACD;;;;;kBANkB,mB","file":"redirect.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {clone} from 'lodash';\nimport {Interceptor} from '@ciscospark/http-core';\n\nconst requestHeaderName = `cisco-no-http-redirect`;\nconst responseHeaderName = `cisco-location`;\n\n/**\n * @class\n */\nexport default class RedirectInterceptor extends Interceptor {\n  /**\n   * @returns {RedirectInterceptor}\n   */\n  static create() {\n    return new RedirectInterceptor({spark: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    if (options.uri.includes(this.spark.config.credentials.samlUrl) || options.uri.includes(this.spark.config.credentials.oauth.tokenUrl)) {\n      return options;\n    }\n\n    options.headers[requestHeaderName] = true;\n    options.$redirectCount = options.$redirectCount || 0;\n    return options;\n  }\n\n  /**\n   * @see Interceptor#onResponse\n   * @param {Object} options\n   * @param {HttpResponse} response\n   * @returns {Object}\n   */\n  onResponse(options, response) {\n    if (response.headers && response.headers[responseHeaderName]) {\n      options = clone(options);\n      options.uri = response.headers[responseHeaderName];\n      options.$redirectCount += 1;\n      if (options.$redirectCount > this.spark.config.maxAppLevelRedirects) {\n        return Promise.reject(new Error(`Maximum redirects exceeded`));\n      }\n\n      return this.spark.request(options);\n    }\n\n    return response;\n  }\n}\n"]}