{"version":3,"sources":["../../src/interceptors/request-logger.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;;;AACA;;;;AAEA;;;;IAGqB,wB;;;;;;;;;;;;AAQnB;;;;;8BAKU,O,EAAS;AACjB,cAAQ,GAAR;AACA,cAAQ,GAAR,aAAwB,QAAQ,MAAR,SAAxB,EAAiD,QAAQ,GAAzD;AACA,cAAQ,GAAR,uBAAkC,mBAAI,OAAJ,uBAAlC;AACA;AACA,UAAI,mBAAI,OAAJ,uBAAJ,EAAwC;AACtC,gBAAQ,GAAR,iBAA4B,mBAAI,OAAJ,uBAA5B;AACD;AACD,UAAI,mBAAI,IAAJ,wBAAJ,EAAsC;AACpC,gBAAQ,GAAR,aAAwB,mBAAI,IAAJ,wBAAxB;AACD;AACD,UAAM,MAAM,IAAI,IAAJ,EAAZ;AACA,UAAI,QAAQ,GAAR,CAAY,8BAAhB,EAAgD;AAC9C,gBAAQ,GAAR,wBAAmC,IAAI,OAAJ,EAAnC,EAAkD,IAAI,WAAJ,EAAlD;AACA,YAAI;AACF;AACA;AACA,cAAI,QAAQ,IAAR,IAAgB,QAAQ,IAAR,CAAa,MAA7B,IAAuC,CAAC,uBAAQ,QAAQ,IAAhB,CAAxC,IAAiE,CAAC,wBAAS,QAAQ,IAAjB,CAAtE,EAA8F;AAC5F,oBAAQ,GAAR,qBAAgC,eAAK,OAAL,CAAa,oBAAK,OAAL,SAAb,EAAoC,EAAC,OAAO,IAAR,EAApC,CAAhC;AACD,WAFD,MAGK;AACH,oBAAQ,GAAR,qBAAgC,eAAK,OAAL,CAAa,OAAb,EAAsB,EAAC,OAAO,IAAR,EAAtB,CAAhC;AACD;AACF,SATD,CAUA,OAAO,CAAP,EAAU;AACR,kBAAQ,IAAR,yCAAqD,CAArD;AACD;AACF;;AAED,aAAO,kBAAQ,OAAR,CAAgB,OAAhB,CAAP;AACD;;AAED;;;;;;;;;mCAMe,O,EAAS,M,EAAQ;AAC9B;AACA;AACA,WAAK,SAAL,CAAe,OAAf;AACA,cAAQ,KAAR,qBAAkC,OAAO,KAAzC;AACA,cAAQ,GAAR;;AAEA,aAAO,kBAAQ,MAAR,CAAe,MAAf,CAAP;AACD;;;;AA1DD;;;6BAGgB;AACd,aAAO,IAAI,wBAAJ,CAA6B,IAA7B,CAAP;AACD;;;yBArBH;;;;;;AAMC;;kBASoB,wB","file":"request-logger.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\n /* eslint no-console:[0] */\n\nimport {get, has, isArray, isString, omit} from 'lodash';\nimport util from 'util';\nimport {Interceptor} from '@ciscospark/http-core';\n\n/**\n * @class\n */\nexport default class RequestLoggerInterceptor extends Interceptor {\n  /**\n   * @returns {RequestLoggerInterceptor}\n   */\n  static create() {\n    return new RequestLoggerInterceptor(this);\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    console.log(`/**********************************************************************\\\\ `);\n    console.log(`Request:`, options.method || `GET`, options.uri);\n    console.log(`WEBEX_TRACKINGID: `, get(options, `headers.trackingid`));\n    /* istanbul ignore next */\n    if (has(options, `headers.x-trans-id`)) {\n      console.log(`X-Trans-ID: `, get(options, `headers.x-trans-id`));\n    }\n    if (has(this, `spark.device.userId`)) {\n      console.log(`User ID:`, get(this, `spark.device.userId`));\n    }\n    const now = new Date();\n    if (process.env.ENABLE_VERBOSE_NETWORK_LOGGING) {\n      console.log(`timestamp (start): `, now.getTime(), now.toISOString());\n      try {\n        // Determine if body is a buffer without relying on Buffer to avoid\n        // node/browser conflicts.\n        if (options.body && options.body.length && !isArray(options.body) && !isString(options.body)) {\n          console.log(`Request Options:`, util.inspect(omit(options, `body`), {depth: null}));\n        }\n        else {\n          console.log(`Request Options:`, util.inspect(options, {depth: null}));\n        }\n      }\n      catch (e) {\n        console.warn(`Could not stringify request options:`, e);\n      }\n    }\n\n    return Promise.resolve(options);\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @param {Error} reason\n   * @returns {Object}\n   */\n  onRequestError(options, reason) {\n    // We need to do the normal onRequest logging, but then log how the request\n    // failed since the response logger won't be called.\n    this.onRequest(options);\n    console.error(`Request Failed: `, reason.stack);\n    console.log(`\\\\**********************************************************************/`);\n\n    return Promise.reject(reason);\n  }\n}\n"]}